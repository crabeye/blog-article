{
    "version": "https://jsonfeed.org/version/1",
    "title": "Bill Lee's Blog",
    "subtitle": "码农的马，谢谢的蟹",
    "icon": "https://blog.liq2.com/images/favicon.ico",
    "description": "好记性不如烂笔头",
    "home_page_url": "https://blog.liq2.com",
    "items": [
        {
            "id": "https://blog.liq2.com/article/55b5aa61",
            "url": "https://blog.liq2.com/article/55b5aa61",
            "title": "说一说微服务网关",
            "date_published": "2022-06-21T10:18:03.000Z",
            "content_html": "<h1 id=\"什么是微服务网关\"><a class=\"anchor\" href=\"#什么是微服务网关\">#</a> 什么是微服务网关？</h1>\n<p>微服务网关是微服务架构系统的唯一入口，能把系统的能力统一经过它对客户端进行开放，类似于面向对象的封装，提供统一的入口，具体里面的业务方法是怎样实现并不公开，只不过网关封装了系统内部架构，为每个客户端提供一个定制的 API。</p>\n<p>基于他是所有 API 的入口这个特性， 所以它可以方便的全局实现如身份验证 (黑白名单)、监控、负载均衡、缓存、协议转换、限流熔断、灰度发布等功能。</p>\n<p><code>微服务网关作为连接服务的消费方和服务提供方的中间件系统，将各自的业务系统的演进和发展做了天然的隔离，使业务系统更加专注于业务服务本身，同时微服务网关还可以为服务提供和沉淀更多附加功能</code></p>\n<p>它的主要作用：</p>\n<ul>\n<li>\n<p>请求接入</p>\n<p>管理所有接入请求，作为所有 API 请求的入口</p>\n</li>\n<li>\n<p>业务聚合</p>\n<p>所有微服务后端可以注册在 API 网关，通过 API 网关统一暴露服务</p>\n</li>\n<li>\n<p>拦截策略</p>\n<p>可以提供统一增加安全、路由、流控、负载均衡等公共服务组件</p>\n</li>\n<li>\n<p>统一管理</p>\n<p>提供统一监控管理工具，配置管理工具，Swagger 工具等设施</p>\n</li>\n</ul>\n<h2 id=\"1过滤器与网关的区别\"><a class=\"anchor\" href=\"#1过滤器与网关的区别\">#</a> 1. 过滤器与网关的区别</h2>\n<ul>\n<li>过滤器只适合当个服务的过滤请求</li>\n<li>网关能拦截整个微服务，实现过滤请求，能够解决整个微服务中的冗余代码</li>\n<li>过滤器是局部拦截，网关是全局拦截</li>\n</ul>\n<h2 id=\"2-zuul与gateway有哪些区别\"><a class=\"anchor\" href=\"#2-zuul与gateway有哪些区别\">#</a> 2. Zuul 与 Gateway 有哪些区别</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项目</th>\n<th style=\"text-align:left\">Zuul</th>\n<th>GateWay</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>基本说明</strong></td>\n<td style=\"text-align:left\">Zuul 是属于 netflix 公司的开源产品属于第一代网关</td>\n<td>Gateway 属于 SpringCloud 自研发的网关框架，属于第二代微服务网关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>底层实现</strong></td>\n<td style=\"text-align:left\">Zuul 网关底层基于 Servlet 实现的，处理 http 请求，阻塞式的 Api</td>\n<td>基于 netty 环境依赖 SpringBoot-WebFux，非阻塞式 API</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>长连接支持</strong></td>\n<td style=\"text-align:left\">不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>负载均衡支持</strong></td>\n<td style=\"text-align:left\">如果需要负载均衡，需要额外集成其他负载均衡框架，可以扩展至其他微服务框架中</td>\n<td>提供了抽象负载均衡，提供了抽象流控，并默认实现了 RedisRateLimiter，仅适合于 Spring Cloud 套件</td>\n</tr>\n</tbody>\n</table>\n<p>总体来说，由于 Spring gateway 使用了支持 NIO 处理的 Netty 容器，能够非阻塞的处理客户端请求，消耗硬件资源会比 Zuul 更少，效率相对较高，同时本身支持对请求的负载均衡和限流，所以他是在 Spring Cloud 项目中的不二选择</p>\n<h1 id=\"如何使用spring-gateway\"><a class=\"anchor\" href=\"#如何使用spring-gateway\">#</a> 如何使用 Spring Gateway</h1>\n<h2 id=\"1添加依赖\"><a class=\"anchor\" href=\"#1添加依赖\">#</a> 1. 添加依赖</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-loadbalancer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2添加配置文件applicationyml\"><a class=\"anchor\" href=\"#2添加配置文件applicationyml\">#</a> 2. 添加配置文件 application.yml</h2>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> bo<span class=\"token punctuation\">-</span>spring<span class=\"token punctuation\">-</span>gateway</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">override-system-properties</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">override-none</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">locator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> api<span class=\"token punctuation\">-</span>web<span class=\"token punctuation\">-</span>management</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//api<span class=\"token punctuation\">-</span>web<span class=\"token punctuation\">-</span>management</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/api<span class=\"token punctuation\">-</span>web<span class=\"token punctuation\">-</span>management/<span class=\"token important\">**</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">-</span>integrated<span class=\"token punctuation\">-</span>auth</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//center<span class=\"token punctuation\">-</span>integrated<span class=\"token punctuation\">-</span>auth</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/center<span class=\"token punctuation\">-</span>integrated<span class=\"token punctuation\">-</span>auth/<span class=\"token important\">**</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">-</span>system<span class=\"token punctuation\">-</span>base</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//center<span class=\"token punctuation\">-</span>system<span class=\"token punctuation\">-</span>base</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/center<span class=\"token punctuation\">-</span>system<span class=\"token punctuation\">-</span>base/<span class=\"token important\">**</span></pre></td></tr></table></figure><h2 id=\"3编写启动类\"><a class=\"anchor\" href=\"#3编写启动类\">#</a> 3. 编写启动类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringGatewayApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringGatewayApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>由于gateway不依赖于serverlet，注意项目启动之前检查是否去除对serverlet的依赖</code></p>\n",
            "tags": [
                "JAVA后端",
                "微服务中间件",
                "Spring Cloud"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/adf95138",
            "url": "https://blog.liq2.com/article/adf95138",
            "title": "Promise,async,await学习总结",
            "date_published": "2022-05-28T08:08:41.000Z",
            "content_html": "<h2 id=\"一-promise的2w1h\"><a class=\"anchor\" href=\"#一-promise的2w1h\">#</a> 一、Promise 的 2W1H</h2>\n<h3 id=\"w1-什么是promise\"><a class=\"anchor\" href=\"#w1-什么是promise\">#</a> W1 什么是 Promise</h3>\n<p>Promise 是一个函数，为了解决回调地狱的一个函数，它在 js 中进行异步编程的新解决方案；它有三个状态和两个改变状态的方法，以及三个 Promise 常用的方法</p>\n<h5 id=\"三个状态\"><a class=\"anchor\" href=\"#三个状态\">#</a> 三个状态</h5>\n<ul>\n<li>pengding  执行中</li>\n<li>fulfilled  已成功，正常完成</li>\n<li>rejected  已失败，执行以错误结束</li>\n</ul>\n<h5 id=\"两个改变状态的方法\"><a class=\"anchor\" href=\"#两个改变状态的方法\">#</a> 两个改变状态的方法</h5>\n<ul>\n<li>resolve ()   把状态改成 fullfilled</li>\n<li>reject () 把状态改成 rejected</li>\n</ul>\n<h5 id=\"三个常用的方法\"><a class=\"anchor\" href=\"#三个常用的方法\">#</a> 三个常用的方法</h5>\n<ul>\n<li>then()</li>\n<li>catch()</li>\n<li>finally()</li>\n</ul>\n<h3 id=\"w2-什么时候使用promise\"><a class=\"anchor\" href=\"#w2-什么时候使用promise\">#</a> W2 什么时候使用 Promise？</h3>\n<p>解决多层套娃的异步调用导致项目代码向右下漂移，以一种只向下扩展的方式使得代码看上去就像不是异步代码一样，读起来不费劲，更优雅一些；</p>\n<p>不使用 Promise 的代码如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第一次开始'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第二次开始'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第三次开始'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一层套一层，右下漂移了！！😲 通过 Promise 改造，可以得到以下样子的代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第一次开始'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第二次开始'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第三次开始'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>看上去是不是心情好得多呢，甚至可以进一步优化成下面这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createTimeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">logContent<span class=\"token punctuation\">,</span>intevel<span class=\"token operator\">=</span><span class=\"token number\">1000</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>intevel<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">createTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第一次开始'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">createTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第二次开始'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">createTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'套娃第三次开始'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个代码看上去就赏心悦目多了✌️</p>\n<h3 id=\"1h-如何使用\"><a class=\"anchor\" href=\"#1h-如何使用\">#</a> 1H 如何使用</h3>\n<p>如 W2 的第二部分代码可以看到，可以通过 new 的方式构造一个 Promise, 其中构造函数传入一个函数，这个函数带入两个参数 (resolve, reject)，他们就是 W1 里面所说的两个改变状态的方法 🌹</p>\n<p>如果方法体正常完成，则调用一下 resolve (),  失败就调用一下 reject ();</p>\n<h2 id=\"二-使用详解\"><a class=\"anchor\" href=\"#二-使用详解\">#</a> 二、使用详解</h2>\n<h3 id=\"如何参数传递\"><a class=\"anchor\" href=\"#如何参数传递\">#</a> 如何参数传递？</h3>\n<p>上面说的方法体内容里面其实是没有传参数到下一个异步执行的方法？自然是直接放到 resolve ()，然后下一步通过 then () 的形参方法参数直接传入到下一个异步执行的方法体，比如我们常需要在项目中拿到用户信息之后，根据用户 id 拿到角色列表，这肯定就需要第一次异步请求拿到的用户 Id，传入第二次异步请求</p>\n<p>我们假设 <code>user.json</code>  和  <code>role.json</code>  请求返回的结果分别为</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//user.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"userId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//role.json?userId=666</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"userId\"</span><span class=\"token operator\">:</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"roles\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"管理员\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"普通用户\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 用了 jQuery 的 ajax 方法，调试的话请先引入 jQuery</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userInfo</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>userId<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> userInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户ID:  \"</span><span class=\"token operator\">+</span>userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role.json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span>userId<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">roleData</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>roleData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如上上面通过 resolve 方法把 ajax 请求的结果传给了 then, 在 then 的参数分别通过 userInfo 和 roleData 接收，然后对数据进行了进一步的处理；</p>\n<h3 id=\"什么时候使用reject\"><a class=\"anchor\" href=\"#什么时候使用reject\">#</a> 什么时候使用 reject ()</h3>\n<p>说清楚这个问题之前，先说一下 W1 里面说的三个状态，pengding  执行中，fulfilled 已成功，rejected  已失败，执行中基本上不用关注，我们通过执行下面代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后浏览器 F12 查看打印结果可以发现 Promise 是这样的，这个 Promise 对象的状态 PromiseState 是 pengding</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220528211529.png\" alt=\"\" /></p>\n<p>然后我们通过在方法体调用 resolve ()</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>发现此时 PromiseState 的状态已经改成 fulfilled；</p>\n<p>如果调用 reject ()</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>发现 PromiseState 已经改成为 rejected，这就是 Promise 的三种状态和两种改变状态的方法，那么既然 resolve 表示正常的时候执行，并且可以把执行结果传入到下一次异步调用进行使用，那么 reject 方法能传值吗？传的值去哪里了？怎么接收？</p>\n<p>答案三连：</p>\n<ul>\n<li>能传值</li>\n<li>reject 代表执行过程出现错误了，自然是给接收错误的地方</li>\n<li>通过 catch () 方法接收</li>\n</ul>\n<p>同样我们通过上面的例子，假如 <code>user.json</code>  由于服务器或者网络原因不能被调用了，我们需要在 ajax 的方法加上一个出现错误的处理情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 用了 jQuery 的 ajax 方法，调试的话请先引入 jQuery</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里加上执行错误的处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用超时或者服务器错误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user1.json'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 直接把调用改成不存在的 user1.json</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userInfo</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>userId<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> userInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户ID:  \"</span><span class=\"token operator\">+</span>userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role.json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span>userId<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">roleData</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>roleData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收的错误消息： \"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过上面的代码，我们发现 reject 传入的消息通过 catch 方法接收了，这就是三大方法中的 then 方法和 catch 方法了，剩下一个 finally () 意思就是无论执行过程中是否正常执行，都会执行里面的代码，和 java 的 finally 代码意思一致，这里需要说明的是<strong> catch 方法，除了能捕获 reject () 调用改变 Promise 状态的结果之外，还能能捕获上面所有执行的异步代码块的问题</strong>，如果前面的异步方法执行发生错误，后面的 then () 不会被执行。</p>\n<h2 id=\"三-async和await的使用\"><a class=\"anchor\" href=\"#三-async和await的使用\">#</a> 三、async 和 await 的使用</h2>\n<p>简单说这两个关键字是基于 Promise 之上的语法糖，它们能使得对异步的操作更加简洁明了</p>\n<h3 id=\"async和await的基本使用\"><a class=\"anchor\" href=\"#async和await的基本使用\">#</a> async 和 await 的基本使用</h3>\n<p>我们可以对方法名进行 async 修饰，标记这个方法为异步方法， 意思就是这个行数返回的值是 Promise 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"async function result\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>比如上面的代码的打印结果就是一个 Promise 结果为 <code>&quot;async function result&quot;</code>  这个字符串，状态 <code>fulfilled</code>  的 Promise 对象；</p>\n<p>如果我们要在这个方法里面对异步方法结果进行操作，则可以通过下面的方式使用异步方法执行之后的结果，这个例子我们使用上面的 getData 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"await请求结果： \"</span><span class=\"token operator\">+</span>res<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后面执行的代码\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>题外：上面方法没有返回结果，想想打印出来的结果是什么？</code> 😃</p>\n<p>这里虽然加上了 await，代码看上去也非常像是同步的代码，会暂停程序的往下执行，但在等待的过程中 javascript 还可以同时处理其他的任务，比如界面的更新，执行其他的程序代码等，如上面代码中最后一行的打印会在 async 方法打印之前打印出来</p>\n<h3 id=\"await使用陷阱\"><a class=\"anchor\" href=\"#await使用陷阱\">#</a> await 使用陷阱</h3>\n<ul>\n<li>\n<h4 id=\"为保证效率可以组合使用之后再用await方法比如\"><a class=\"anchor\" href=\"#为保证效率可以组合使用之后再用await方法比如\">#</a> 为保证效率，可以组合使用之后再用 await 方法，比如</h4>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 下面省略对 res1 和 res2 的操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//.....</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以使用以下方式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user2.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>user1<span class=\"token punctuation\">,</span>user2<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promist<span class=\"token punctuation\">.</span><span class=\"token function\">promiseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>res1<span class=\"token punctuation\">,</span>res2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 下面省略对 res1 和 res2 的操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//.....</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效率理论上能提升一倍</p>\n<ul>\n<li>\n<h4 id=\"循环中使用异步操作不能调用foreachmap\"><a class=\"anchor\" href=\"#循环中使用异步操作不能调用foreachmap\">#</a> 循环中使用异步操作，不能调用 forEach ()/map ()</h4>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>userId<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the end\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如上第二行代码不会等到所有代码执行完毕再执行，而是马上执行后面的 <code>&quot;the end&quot;</code>  输出，尽管使用了 await 进行修饰，可以使用传统的 for 循环来达到我们先要的效果</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>userId<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<h4 id=\"不能在全局和普通函数中使用await必须在async修饰的函数体里面使用\"><a class=\"anchor\" href=\"#不能在全局和普通函数中使用await必须在async修饰的函数体里面使用\">#</a> 不能在全局和普通函数中使用 await，必须在 async 修饰的函数体里面使用</h4>\n</li>\n</ul>\n<p>不在 async 函数体里面会报错😒</p>\n",
            "tags": [
                "Web前端",
                "javascript"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/7654e55b",
            "url": "https://blog.liq2.com/article/7654e55b",
            "title": "各个管理端框架比较参考",
            "date_published": "2022-05-25T00:32:01.000Z",
            "content_html": "<p>市面上越来越多的好看的管理端框架，真是可谓眼花缭乱，对于做主要做后端的人来说，真是个好事情，拿下代码来稍作学习便可以开发管理系统了！本文就分享一些体验过的框架。</p>\n<p>感觉目前 UI 框架整体分三类</p>\n<ul>\n<li>注重视觉和生态的，比如 ant-design, acro-design 等；</li>\n<li>注重组件开发的，如 element-ui, vant, naive-ui 等；</li>\n<li>注重开箱即用的，这种方式基本上是在上面的两种框架的基础上，自己通过整合路由、权限和一些常用实现，同时对性能和美观方面进行优化的前端框架，比如 antd-admin, naive-ui-admin,  vue-admin-better 等；</li>\n</ul>\n<h2 id=\"naive-ui\"><a class=\"anchor\" href=\"#naive-ui\">#</a> naive-ui</h2>\n<p>这个目前兴趣比较大的一个框架，因为感觉跟现在的项目要求比较契合，界面也基本 OK</p>\n<p>官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFpdmV1aS5jb20v\">点这里</span></p>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFpdmV1aS5jb20vemgtQ04vb3MtdGhlbWUvZG9jcy9pbnRyb2R1Y3Rpb24=\">Naive UI - Naive UI</span></p>\n<p>组件说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFpdmV1aS5jb20vemgtQ04vb3MtdGhlbWUvY29tcG9uZW50cy9idXR0b24=\"> Naive UI</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525093636.png\" alt=\"\" /></p>\n<h3 id=\"soybean-admin\"><a class=\"anchor\" href=\"#soybean-admin\">#</a> soybean-admin</h3>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbmdodWFuZ2RjL3NveWJlYW4tYWRtaW4=\">基于 Vite + Vue3 + NaiveUI + TypeScript 的漂亮清新的中后台管理模版 </span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3liZWFuLnByby8=\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525093923.png\" alt=\"\" /></p>\n<h3 id=\"naive-ui-admin\"><a class=\"anchor\" href=\"#naive-ui-admin\">#</a> naive-ui-admin</h3>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pla2lwL25haXZlLXVpLWFkbWlu\">Naive Ui Admin 基于 vue3,vite2,TypeScript 的中后台解决方案 </span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWl2ZS11aS1hZG1pbi52ZXJjZWwuYXBw\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525094131.png\" alt=\"\" /></p>\n<p>这个还支持其他几个版本，貌似除了 v1 版本之外收费，naive 版本的 v2 个人觉得界面还可以，但是价钱对比没有什么优势</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525094837.png\" alt=\"\" /></p>\n<h3 id=\"admin-work\"><a class=\"anchor\" href=\"#admin-work\">#</a> admin-work</h3>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3FpbmdxaW5neHVhbi9hZG1pbi13b3Jr\">一款免费开源、功能强大、方便易用、漂亮的中后台管理系统模板</span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cDovL2F3LnZ1ZWFkbWlud29yay5jb20v\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525100846.png\" alt=\"\" /></p>\n<p>​\t虽然也有收费版，但是我居然觉得免费版要比收费的要好看 😂</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525101100.png\" alt=\"\" /></p>\n<h2 id=\"ant-design\"><a class=\"anchor\" href=\"#ant-design\">#</a> ant-design</h2>\n<p>这个目前官方只有 React 版本，Vue 版本由个人开发维护</p>\n<p>官方网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnQuZGVzaWduL2luZGV4LWNu\">Ant Design - 一套企业级 UI 设计语言和 React 组件库</span></p>\n<h3 id=\"ant-design-pro\"><a class=\"anchor\" href=\"#ant-design-pro\">#</a> ant-design-pro</h3>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi1wcm8=\">Use Ant Design like a Pro</span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV2aWV3LnByby5hbnQuZGVzaWdu\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525103829.png\" alt=\"\" /></p>\n<h3 id=\"antd-admin\"><a class=\"anchor\" href=\"#antd-admin\">#</a> antd-admin</h3>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3p1aWlkZWEvYW50ZC1hZG1pbg==\">zuiidea/antd-admin: An excellent front-end solution for enterprise applications built upon Ant Design and UmiJS (github.com)</span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnRkLWFkbWluLnp1aWlkZWEuY29tLw==\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525113134.png\" alt=\"\" /></p>\n<h2 id=\"acro-design\"><a class=\"anchor\" href=\"#acro-design\">#</a> acro-design</h2>\n<p>这个是字节跳动最近两年才开源出来的视觉设计和生态框架，和 semi 同属一家公司还几乎同时开源 😂, 居然还同时被指抄袭 antd, 它有 React 和 Vue 两个版本，官方提供 arco-pro 基础开发框架</p>\n<p>官网： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNvLmRlc2lnbi8=\">Arco Design - 企业级产品的完整设计和开发解决方案</span></p>\n<h3 id=\"arco-design-pro-vue\"><a class=\"anchor\" href=\"#arco-design-pro-vue\">#</a> arco-design-pro-vue</h3>\n<p>官方提供的框架</p>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FyY28tZGVzaWduL2FyY28tZGVzaWduLXByby12dWU=\">An out-of-the-box solution to quickly build enterprise-level applications based on Arco Design</span></p>\n<p>预览地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUtcHJvLmFyY28uZGVzaWduLw==\">点我预览</span></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220525115320506.png\" alt=\"\" /></p>\n",
            "tags": [
                "Web前端",
                "UI框架"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/768b74a2",
            "url": "https://blog.liq2.com/article/768b74a2",
            "title": "jsDelivr静态文件CDN加速失效之后解决方案和PicGo图床基本使用",
            "date_published": "2022-05-20T08:33:30.000Z",
            "content_html": "<p>屁颠屁颠用 gihub+jsDelivr 加速做 js 文件 cdn 加速和图床之后，发现国内网络访问打开不到图片，原来 jsDelivr 在去年年底不能访问了，官方声明 Unfortunately today jsDelivr unexpectedly lost its ICP license in China.<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/vyUEcWz3Hfsx6oZ.png\" alt=\"\" /></p>\n<p>虽然说看起来是给创建博客的个人和小企业来说是个坏事，但是对于整个国家宏观来说却也可以理解，国人必须要自己能拥有网络内容主动权嘛，话说现在形势还这么紧张不是；</p>\n<h2 id=\"全局url替代\"><a class=\"anchor\" href=\"#全局url替代\">#</a> 全局 URL 替代</h2>\n<ul>\n<li>\n<p>如果使用的是 npm 库，可以使用 unpkg.com 替换</p>\n<p>eg:  <code>https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js</code> ，替换为 <code>https://unpkg.com/pace-js@1.0.2/pace.min.js</code></p>\n</li>\n<li>\n<p>上面方式慢，可以使用中国镜像 <span class=\"exturl\" data-url=\"aHR0cDovL3VucGtnLnpoaW1nLmNvbQ==\">unpkg.zhimg.com</span></p>\n<p>eg:  <code>https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.min.js</code> ，替换为 <code>https://unpkg.zhimg.com/pace-js@1.0.2/pace.min.js</code>  但是<strong>这种方式并不是对所有的连接都有效</strong>，比如： <code>https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js</code>  被替换之后还是访问不到。</p>\n</li>\n</ul>\n<p>综上，如果是在开发工具里，可以全局搜索 <code>cdn.jsdelivr.net/npm</code>  替换为 <code>unpkg.com</code>  或者 <code>unpkg.zhimg.com</code> ，但是仅限 npm 库，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jZG4teGk5ZGs3MmQuanNkZWxpdnIubmV0L2NvbWJpbmUlRTUlOEElOUYlRTglODMlQkQlRTUlOEQlQjQlRTUlQjklQjYlRTQlQjglOEQlRTglQjUlQjclRTQlQkQlOUMlRTclOTQlQTg=\">对于 cdn.jsdelivr.net/combine 功能却并不起作用</span> 😒 ；</p>\n<h3 id=\"新的项目使用其他国内支持的\"><a class=\"anchor\" href=\"#新的项目使用其他国内支持的\">#</a> 新的项目使用其他国内支持的</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG5qcy5jb20v\">https://cdnjs.com/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudW5wa2cuY29tLw==\">https://www.unpkg.com/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9vdGNkbi5jbi8=\">https://www.bootcdn.cn/</span></li>\n</ul>\n<h3 id=\"自己搭建服务器或者购买\"><a class=\"anchor\" href=\"#自己搭建服务器或者购买\">#</a> 自己搭建服务器或者购买</h3>\n<ul>\n<li>\n<p>自己搭建</p>\n<p>对于图床服务器可以考虑自己搭建图床服务器 [一个易于搭建的图床服务器](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JlZG5zL0ltYWdlQmVk\">Redns/ImageBed: 一个易于搭建的图床服务 (github.com)</span>)</p>\n<p>搭建 minIO 服务器，暂时不知道是否支持 js 文件 ❓</p>\n</li>\n<li>\n<p>购买收费服务</p>\n<p>比如购买某里，某迅的 CDN 加速，天下没有免费的午餐，交点钱买个安心；</p>\n</li>\n</ul>\n<p>-------------------------------2022-06-06 - 更新分割线 start-------------------------------</p>\n<h3 id=\"使用临时可用的连接地址\"><a class=\"anchor\" href=\"#使用临时可用的连接地址\">#</a> 使用临时可用的连接地址</h3>\n<p>根据 github 上面的 jsdelivr 项目的 issue 提示， 居然有可以用的的域名<br />\n<img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220609141107.png\" alt=\"\" /><br />\n如上图所示，我们可以根据上面的域名，进行对使用的项目进行由 <code>cdn.jsdelivr.net</code>  到 <code>fastly.jsdelivr.net</code>  全局替换， 这个方法应该适用于 hexo 的 shoka 主题国内不可用问题</p>\n<p>-------------------------------2022-06-06 - 更新分割线 end-------------------------------</p>\n<h2 id=\"picgo图床的基本使用\"><a class=\"anchor\" href=\"#picgo图床的基本使用\">#</a> PicGo 图床的基本使用</h2>\n<h3 id=\"软件下载和安装\"><a class=\"anchor\" href=\"#软件下载和安装\">#</a> 软件下载和安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv\">PicGo</span> 是一个 github 上开源项目，发布的版本可以点<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz\">这里</span>下载，写文章的时候的最新稳定版本是 2.3.0，安装成功后如图；</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts//blog/article-files/2022/05/20220521094526.png\" alt=\"\" /></p>\n<h3 id=\"插件安装\"><a class=\"anchor\" href=\"#插件安装\">#</a> 插件安装</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zbS1wdjJjbzU0Y2Z6aXdpZDFyZWJ1NGF6d2lldDFjZHZncTUxYnVqdS5tcw==\">上面安装的版本默认支持 sm.ms</span>, 腾讯云 cos，又拍云，github，阿里云 oss 等， 但是想要支持 gitee 和其他如 imgtp 上传的话需要点击插件设置安装插件之后才能使用，</p>\n<p>点击插件设置可以进行关键字搜索进行安装，有时候不知道有哪些插件可用，所以我更喜欢点上面的购物袋进行插件列表查看，或者点<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BpY0dvL0F3ZXNvbWUtUGljR28=\">这里</span>直接传送；然后看看哪些图床可以使用。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts//blog/article-files/2022/05/20220521095325.png\" alt=\"\" /></p>\n<h3 id=\"账号配置\"><a class=\"anchor\" href=\"#账号配置\">#</a> 账号配置</h3>\n<p>根据各个平台要求，结合各个插件使用进行配置，就能完成图床的配置；</p>\n<p>说下我选择图床的考虑因素：</p>\n<ol>\n<li>\n<p>要有内容自主权</p>\n<p>现在免费的和付费的图床这么多，自然是要考虑要一个自己控制内容的，我作为写博客使用的图床，一般都是会根据时间进行放置，所以必要能按照我希望的格式和目录去放置，大致看了下除了七牛，腾讯云 COS，阿里云 OSS，github 这些大厂提供的服务可以存放到指定的目录，但是都是有容量限制要不就是要米🔓</p>\n</li>\n<li>\n<p>备份功能和图床切换方便</p>\n<p>万一你使用的图床挂了呢，必须是要能整个图床内容图片整体备份出来，按照一定的格式切换到另外一个图床继续浪里个浪啊；</p>\n</li>\n</ol>\n<h3 id=\"文件上传和链接获取\"><a class=\"anchor\" href=\"#文件上传和链接获取\">#</a> 文件上传和链接获取</h3>\n<p>上传和链接获取这个应该是用过电脑一年以上的人应该都是了的，应该不用多说了，直接上传剪贴板的图片功能也支持微信等一些工具的截图，💃真是非常的 nice 啊！</p>\n",
            "tags": [
                "Web前端",
                "jsDelivr",
                "PicGo图床"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/ffae4388",
            "url": "https://blog.liq2.com/article/ffae4388",
            "title": "用jsDelivr和Github做免费的CDN加速",
            "date_published": "2022-05-16T04:13:50.000Z",
            "content_html": "<h2 id=\"cdn解释\"><a class=\"anchor\" href=\"#cdn解释\">#</a> CDN 解释</h2>\n<p>CDN 是内容分发网络（Content Delivery Network）的首字母简写，是指一组分布在不同地理位置的服务器，协同工作以提供互联网内容的快速交付。</p>\n<p>CDN 允许快速传输加载互联网内容所需的资源，包括 HTML 页面、javascript 文件、样式表、图像和视频。 CDN 服务已得到不断普及。如今，大多数 web 流量都通过 CDN 提供服务，包括来自 Facebook、Netflix 和亚马逊等主要网站的流量。</p>\n<p>正确配置的 CDN 还可帮助保护网站免受某些常见的恶意攻击，例如分布式拒绝服务（DDOS）攻击。</p>\n<h3 id=\"为什么使用cdn\"><a class=\"anchor\" href=\"#为什么使用cdn\">#</a> 为什么使用 CDN</h3>\n<ul>\n<li>缩短网站加载时间 – 通过将内容分发到访问者附近的 CDN 服务器（以及其他优化措施），访问者体验到更快的页面加载时间。由于访问者更倾向于离开加载缓慢的网站，CDN 可以降低跳出率并增加人们在该网站上停留的时间。换句话说，网站速度越快，用户停留的时间越长。</li>\n<li>减少带宽成本 – 网站托管的带宽消耗成本是网站的主要费用。通过缓存和其他优化，CDN 能够减少源服务器必须提供的数据量，从而降低网站所有者的托管成本。</li>\n<li>增加内容可用性和冗余 – 大流量或硬件故障可能会扰乱正常的网站功能。由于 CDN 具有分布式特性，因此与许多源服务器相比，CDN 可以处理更多流量并更好地承受硬件故障。<br />\n改善网站安全性 – CDN 可以通过提供 DDoS 缓解、安全证书的改进以及其他优化措施来提高安全性。</li>\n</ul>\n<h2 id=\"创建过程\"><a class=\"anchor\" href=\"#创建过程\">#</a> 创建过程</h2>\n<h3 id=\"创建github静态文件存放项目比如\"><a class=\"anchor\" href=\"#创建github静态文件存放项目比如\">#</a> 创建 github 静态文件存放项目，比如：</h3>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516145102758.png\" alt=\"创建项目\" /></p>\n<h3 id=\"提交静态文件到1创建项目\"><a class=\"anchor\" href=\"#提交静态文件到1创建项目\">#</a> 提交静态文件到 #1 创建项目</h3>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516145102754.png\" alt=\"提交文件\" /></p>\n<h3 id=\"获取转换文件\"><a class=\"anchor\" href=\"#获取转换文件\">#</a> 获取转换文件</h3>\n<p>复制文件地址到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tL2dpdGh1Yg==\">https://www.jsdelivr.com/github</span> 进行地址转换， 点击 copy 获取 cdn 连接</p>\n<p>其实这里的路径规则就是 按照</p>\n<pre><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径\n</code></pre>\n<p>知道这个规则之后你可以自行修改路径了  🤞</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516161211430.png\" alt=\"image-20220516161211430\" /></p>\n<h3 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h3>\n<p>在 html 或者 markdown 文件里面引用 URL  💃</p>\n",
            "tags": [
                "Web前端",
                "jsDelivr",
                "CDN加速"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/7d501b47",
            "url": "https://blog.liq2.com/article/7d501b47",
            "title": "Hexo的aomori主题使用Remark42搭建文章评论功能",
            "date_published": "2022-05-15T05:32:25.000Z",
            "content_html": "<p>开始求生欲望极强的声明一下，本人刚刚开始玩 Hexo 几天，所以都是以我现在的水平表述操作过程，说得不对还请多多指正。</p>\n<h2 id=\"环境说明\"><a class=\"anchor\" href=\"#环境说明\">#</a> 环境说明</h2>\n<ol>\n<li>Hexo 6.2.0</li>\n<li>主题 Aomori 1.35.0</li>\n<li>Remark42 1.9.0</li>\n<li>Remark42 部署服务器环境 wind10 操作系统</li>\n<li>nginx 1.21.6</li>\n<li>部署环境，Github Pages</li>\n</ol>\n<h2 id=\"操作过程\"><a class=\"anchor\" href=\"#操作过程\">#</a> 操作过程</h2>\n<h3 id=\"配置自己的remark42服务器\"><a class=\"anchor\" href=\"#配置自己的remark42服务器\">#</a> <strong>配置自己的 remark42 服务器</strong></h3>\n<p>官方提供两中配置方式，docker 部署和二进制安装部署，本文使用 windwos 环境下的 zip 文件进行安装<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VtcHV0dW4vcmVtYXJrNDIvcmVsZWFzZXMvZG93bmxvYWQvdjEuOS4wL3JlbWFyazQyLndpbmRvd3MtYW1kNjQuemlw\">点这里下载 Remark42-1.9.0</span></p>\n<p>下载后直接解压，文件结构也很简单</p>\n<pre><code>.\n+-- _config.yml\n+-- var\n|   +-- avanta\n|   +-- backups\n+-- remark42.windows-amd64.exe\n+-- README.md\n+-- LICENSE\n</code></pre>\n<p>参考官方文档的例子  cmd 到文件夹之后  直接用 remark42.windows-amd64.exe 后面带配置参数就可以跑起来， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLw==\">官方文档说明</span></p>\n<p>比如使用官方的启动例子就能运行起来：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ remark42.linux-amd64 server --secret<span class=\"token operator\">=</span><span class=\"token number\">12345</span> --url<span class=\"token operator\">=</span>http://127.0.0.1:8080</pre></td></tr></table></figure><p>运行之后你浏览器打开 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgwL3dlYg==\">http://127.0.0.1:8080/web</span>, 能够看到一个如下的页面，说明你已经跑起来 😄</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220515185339060.png\" alt=\"\" /></p>\n<p>参考启动参数，结合自身项目情况，我整理了几个可能你和我一样也可能用到的一个一个启动命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>remark42.windows-amd64.exe server --secret<span class=\"token operator\">=</span>not4you2know --url<span class=\"token operator\">=</span>https://sub.yourdomain.com --auth.github.cid<span class=\"token operator\">=</span><span class=\"token number\">1107</span>********9011b --auth.github.csec<span class=\"token operator\">=</span>a7665**********05741 --auth.anon --site<span class=\"token operator\">=</span>mySiteId</pre></td></tr></table></figure><p>其中各个参数说明：</p>\n<ul>\n<li>\n<p>--secret 必须参数，官方说明是 secret key, can be any long and hard-to-guess string 具体是起什么作用？没有弄明白，又知道的请留言帮我解惑🤝</p>\n</li>\n<li>\n<p>--url Remark42 服务器的 URL 必须的参数， 这个也不知道起什么作用，我测试是设置内网 http://127.0.0.1:8080 地址，然后用 nginx 映射道外网域名使用自己的域名也没有发现问题</p>\n</li>\n<li>\n<p>--auth 开头的参数，用于配置评论的身份认证，需要开通第三方的登陆认证权限，本例子直配置了 github 登陆认证权限，获取第三方应用分配的 clientId 和 clientScret 分别对应 --auth.github.cid 和 auth.github.csec 两个值</p>\n</li>\n<li>\n<p>--auth.anon 是否允许匿名评论 (匿名评论也需要随便填入一个昵称)，只有 key 没有值，加上为 true, 去掉就是 false</p>\n</li>\n<li>\n<p>--site 这个参数默认是 remark, 必须和前端的配置一致，不一致可能导致之前评论会丢失</p>\n<p>其他配置说明请参考官方说明 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL3BhcmFtZXRlcnMv\">Remark42 服务器配置说明</span></p>\n</li>\n</ul>\n<h3 id=\"配置外网映射\"><a class=\"anchor\" href=\"#配置外网映射\">#</a> <strong>配置外网映射</strong></h3>\n<p>由于博客放到外网，所以需要把 Remark42 进行外网映射，具体配置方式这里不做说明，需要注意的两个地方：</p>\n<ul>\n<li>因为 GitHub pages 和 GitLab pages 都是默认使用 SSL 协议的 https 进行访问，所以映射需要同样的使用 SSL 部署 Remark42</li>\n<li>考虑前端的访问跨域问题 (后面验证好像 Remark42 默认支持跨域访问，但是为了保险最好也不要忽略)</li>\n</ul>\n<h3 id=\"配置hexo的_configyml文件\"><a class=\"anchor\" href=\"#配置hexo的_configyml文件\">#</a> <strong>配置 Hexo 的_config.yml 文件</strong></h3>\n<p>Hexo 的根目录 _config.yml, 添加如下配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">aomori_remark42</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># 如果要放到 github pages，需要把第 #1 步映射到外网</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://sub.yourdomain.com'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">site_id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mySiteId'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\"># 最多显示评论数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">max_shown_comments</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"light\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># 用中文显示评论框</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">locale</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\"># 一些组件配置 embed 基本评论小部件 last-comments 最后评论小部件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">components</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'embeded'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'last-comments'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\"># 是否显示邮件订阅</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">show_email_subscription</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>按照上面的配置做好了之后，基本上就可以用了，其中各个参数的含义如官方说明 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL2Zyb250ZW5kLw==\">Remark42 前端配置</span>)：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> string (required) – hostname of Remark42 server<span class=\"token punctuation\">,</span> same as REMARK_URL in backend config<span class=\"token punctuation\">,</span> e.g. \"https<span class=\"token punctuation\">:</span>//demo.remark42.com\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">site_id</span><span class=\"token punctuation\">:</span> string (optional<span class=\"token punctuation\">,</span> remark by default) – the SITE that you passed to Remark42 instance on start of backend.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> string (optional<span class=\"token punctuation\">,</span> window.location.origin + window.location.pathname by default) – url to the page with comments<span class=\"token punctuation\">,</span> it is used as unique identificator for comments thread</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Note that if you use query parameters as significant part of URL (the one that actually changes content on page) you will have to configure URL manually to keep query params<span class=\"token punctuation\">,</span> as window.location.origin + window.location.pathname doesn't contain query params and hash. For example<span class=\"token punctuation\">,</span> default URL for https<span class=\"token punctuation\">:</span>//example/com/example<span class=\"token punctuation\">-</span>post<span class=\"token punctuation\">?</span>id=1<span class=\"token comment\">#hash would be https://example/com/example-post</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">components</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>'embed' <span class=\"token punctuation\">|</span> 'last<span class=\"token punctuation\">-</span>comments' <span class=\"token punctuation\">|</span> 'counter'<span class=\"token punctuation\">]</span> (optional<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'embed'</span><span class=\"token punctuation\">]</span> by default) – an array of widgets that should be rendered on a page. You may use more than one widget on a page.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">Available components are</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>'embed' – basic comments widget</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>'last<span class=\"token punctuation\">-</span>comments' – last comments widget<span class=\"token punctuation\">,</span> see Last Comments section below</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>'counter' – counter widget<span class=\"token punctuation\">,</span> see Counter section below</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">max_shown_comments</span><span class=\"token punctuation\">:</span> number (optional<span class=\"token punctuation\">,</span> 15 by default) – maximum number of comments that is renered on mobile version</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> 'light' <span class=\"token punctuation\">|</span> 'dark' (optional<span class=\"token punctuation\">,</span> 'light' by default) – changes UI theme</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">page_title</span><span class=\"token punctuation\">:</span> string (optional<span class=\"token punctuation\">,</span> document.title by default) – title for current comments page</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">locale</span><span class=\"token punctuation\">:</span> enum (optional<span class=\"token punctuation\">,</span> 'en' by default) – interface localization<span class=\"token punctuation\">,</span> check possible localizations</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key atrule\">show_email_subscription</span><span class=\"token punctuation\">:</span> boolean (optional<span class=\"token punctuation\">,</span> true by default) – enables email subscription feature in interface when enable it from backend side<span class=\"token punctuation\">,</span> if you set this param in false you will get notifications email notifications as admin but your users won't have interface for subscription</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">simple_view</span><span class=\"token punctuation\">:</span> boolean (optional<span class=\"token punctuation\">,</span> false by default) – overrides the parameter from the backend minimized UI with basic info only</pre></td></tr></table></figure><h2 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2>\n<h3 id=\"配置remark42需要ssl证书\"><a class=\"anchor\" href=\"#配置remark42需要ssl证书\">#</a> 配置 Remark42 需要 SSL 证书</h3>\n<p>可以去阿里云官网去申请免费的 ssl 证书，然后在适当的位置配置上就可以</p>\n<h3 id=\"remrk客户端显示不了登陆选项\"><a class=\"anchor\" href=\"#remrk客户端显示不了登陆选项\">#</a> Remrk 客户端显示不了登陆选项</h3>\n<p>Remark42 默认没有配置任何登陆选项，请至少打开 --scret.anno 以支持匿名评论，其他的认证方式情参考官网说明<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL2F1dGhvcml6YXRpb24v\"> Remark42 认证权限说明</span></p>\n",
            "tags": [
                "Web前端",
                "Hexo学习",
                "Hexo",
                "工具使用"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/3aeffd05",
            "url": "https://blog.liq2.com/article/3aeffd05",
            "title": "Alpine和eleventy搭配的基本使用",
            "date_published": "2022-05-13T07:31:26.000Z",
            "content_html": "<p>同理，先占位， 后面会更新</p>\n",
            "tags": [
                "Web前端",
                "Alpine",
                "11ty",
                "eleventy"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/955aeda8",
            "url": "https://blog.liq2.com/article/955aeda8",
            "title": "JAVA多线程总结之一",
            "date_published": "2022-05-13T05:49:45.000Z",
            "content_html": "<p>这里还没有任何内容，先占个位！</p>\n",
            "tags": [
                "Java后端",
                "多线程",
                "线程池",
                "JUC"
            ]
        },
        {
            "id": "https://blog.liq2.com/article/52cf48bf",
            "url": "https://blog.liq2.com/article/52cf48bf",
            "title": "开通博客第一天",
            "date_published": "2022-05-12T13:02:40.000Z",
            "content_html": "<p>喜大普奔，终于搞定一个低成本的放博客的地方，并且实实在在的跑了起来！</p>\n<h2 id=\"博客目的\"><a class=\"anchor\" href=\"#博客目的\">#</a> 博客目的</h2>\n<ol>\n<li>记录各种操作的过程，便于以后查阅；</li>\n<li>锻炼写作，提升自己思路整理能力；</li>\n<li>各种分享；</li>\n<li>看看自己能不能坚持做一件事，我想如果我坚持，然后不时翻一翻，应该还是有好处。</li>\n</ol>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/cover_20220512.jfif\" alt=\"happy\" /></p>\n<h2 id=\"加油\"><a class=\"anchor\" href=\"#加油\">#</a> 加油！</h2>\n",
            "tags": [
                "随便写写",
                "心情记录",
                "胡言乱语"
            ]
        }
    ]
}