<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Bill Lee&#39;s Blog</title>
        <subtitle>码农的马，谢谢的蟹</subtitle>
        <icon>https://blog.liq2.com/images/favicon.ico</icon>
        <link>https://blog.liq2.com</link>
        <author>
          <name>Bill Lee</name>
        </author>
        <description>好记性不如烂笔头</description>
        <language>zh-CN</language>
        <pubDate>Wed, 29 Jun 2022 12:07:21 +0800</pubDate>
        <lastBuildDate>Wed, 29 Jun 2022 12:07:21 +0800</lastBuildDate>
        <category term="直行螃蟹" />
        <category term="Bill" />
        <category term="记录生活" />
        <category term="libiaolee" />
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/ff29002e</guid>
            <title>解决hexo-shoka主题的流程图mermaid不能正常显示问题</title>
            <link>https://blog.liq2.com/article/ff29002e</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/tools/" />
            <category term="Hexo" scheme="https://blog.liq2.com/categories/frontend/tools/hexo/" />
            <category term="Hexo" scheme="https://blog.liq2.com/tags/Hexo/" />
            <category term="工具使用" scheme="https://blog.liq2.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/" />
            <pubDate>Wed, 29 Jun 2022 12:07:21 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;前几天总结了一下分布式事务的文字，由于写了一些解决方案的执行原理，用到了状态图，开开心心的在 Typora 上面显示的好好的，结果已发布到 hexo 博客，直接&lt;span class=&#34;red&#34;&gt;显示不出来&lt;/span&gt;！！！🕳&lt;/p&gt;
&lt;h2 id=&#34;解决过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决过程&#34;&gt;#&lt;/a&gt; 解决过程&lt;/h2&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; 开始以为是没有正确安装 mermaind 依赖，一顿安装命令安装 &lt;code&gt;npm i markdown-it-mermaid --save --legacy-peer-deps&lt;/code&gt;  结果还是不行；&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; 又是怀疑配置不对，在_config.yml 上面，在主题官方操作文档也没有说明的情况下，添加各种猜测的配置测试还是没有结果；&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后比较官方网站的流程图页面的的 html 源码，发现流程图是由一个个 svg 标签，而自己的页面却没有，而直接拷贝这段 svg 到 public 文件夹下面的文件的 html 文件里面是可以正常显示的，这说明官方文档说的要在显示流程图的 html 文件中添加 mermaid 的 css 依赖是有正常加载的，那么只有一个可能就是由 markdown 构建 html 文件的时候除了问题！&lt;/p&gt;
&lt;p&gt;各种找啊找，终于找到一个目录在 &lt;span class=&#34;rainbow&#34;&gt;node_modules\hexo-renderer-multi-markdown-it\lib\renderer\markdown-it-mermaid&lt;/span&gt; 里面的 55-69 行的中间打上一个 console.log&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;span&gt;markdown-it-mermaid&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;md&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;renderer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rules&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;fence&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tokens&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;------&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mermaid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mermaid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; code&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;firstLine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;^graph (?:TB|BT|RL|LR|TD);?$&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; graph&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mermaidChart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; firstLine&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defaultRenderer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发现如果使用如下的代码块注释的时候，根本进入不到上面的调试代码&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;mermaid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;some content here&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;开始怀疑人生的时候，在 &lt;ins class=&#34;dot&#34;&gt;npx hexo server&lt;/ins&gt; 打开的情况下，一个不小心将上面的的 mermaid 后面加上了一个 2，形如&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;mermaid2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;some content here&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果控制台输出了&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mermaid&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&amp;lt;&lt;/span&gt;------false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;😓😓😓😓😓😓😓:weat:😓😓😓😓😓原来 mermaid 没有被识别为 token?? 但是如果改成 mermaid2 的话，Typora 又识别不了啊&lt;/p&gt;
&lt;h2 id=&#34;最后解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最后解决方案&#34;&gt;#&lt;/a&gt; 最后解决方案&lt;/h2&gt;
&lt;p&gt;修改 &lt;code&gt;node_modules\hexo-renderer-multi-markdown-it\lib\renderer\markdown-it-mermaid&lt;/code&gt;  文件的第 59 行的判断 &lt;code&gt;if (token.info === &#39;Mermaid&#39;) &amp;#123;&lt;/code&gt; 这样&lt;mark&gt;在 Typora 编辑的时候也注意要第一个字母大写&lt;/mark&gt;了😹, 勉强的解决方案&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;md&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;renderer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rules&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;fence&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tokens&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;content&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;------&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Mermaid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;info &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Mermaid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; code&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;firstLine&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;^graph (?:TB|BT|RL|LR|TD);?$&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; graph&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                firstLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mermaidChart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; firstLine&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defaultRenderer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; env&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;有遇到这个问题并且完美解决的留言教我啊🙏🙏&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/62ceeeec</guid>
            <title>分布式事务解决方案</title>
            <link>https://blog.liq2.com/article/62ceeeec</link>
            <category term="后端" scheme="https://blog.liq2.com/categories/backend/" />
            <category term="Java" scheme="https://blog.liq2.com/categories/backend/java/" />
            <category term="微服务" scheme="https://blog.liq2.com/categories/backend/java/micro-service/" />
            <category term="微服务中间件" scheme="https://blog.liq2.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/" />
            <category term="分布式事务" scheme="https://blog.liq2.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/" />
            <category term="Spring Cloud" scheme="https://blog.liq2.com/tags/Spring-Cloud/" />
            <pubDate>Wed, 22 Jun 2022 09:07:23 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;事务，大多时候我们是说在单体应用情况下，把多个操作整体执行的能力，分布式事务，就是在多个应用甚至多个数据源的情况下，保证操作的事务特性，在开始之前先回顾一下事务的相关基础知识&lt;/p&gt;
&lt;h1 id=&#34;一-基础概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-基础概念&#34;&gt;#&lt;/a&gt; 一、基础概念&lt;/h1&gt;
&lt;p&gt;举一个例子，我们有一个网上商城平台，用户下单购买商品，商品的库存减少，同时产生一条订单记录，订单上这个商品的数量就是商品库存的数量，事务在这个例子上表现就是在下单前和下单之后，商品的总数量是不变的。&lt;/p&gt;
&lt;p&gt;我们以这个例子来说明一下事务和分布式事务：&lt;/p&gt;
&lt;h2 id=&#34;1事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1事务&#34;&gt;#&lt;/a&gt; 1. 事务&lt;/h2&gt;
&lt;p&gt;上面例子涉及到两个数据库操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在库存表减少商品的库存数量&lt;/li&gt;
&lt;li&gt;新增一个订单记录订单购买的商品数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个操作必须作为一个整体执行，要么两个都成功，要么两个都执行失败，这就是事务了，事务具有 ACID 四个基本特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atomicity（原子性）&lt;/strong&gt;：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复到事务开始前的状态，就像这个事务从来没有执行过一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency（一致性）&lt;/strong&gt;：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。完整性包括外键约束、应用定义的等约束不会被破坏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Isolation（隔离性）&lt;/strong&gt;：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。&lt;/p&gt;
&lt;p&gt;四种隔离级别比较&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;脏读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;幻读&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;读未提交&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;读已提交&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;可重复读&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;串行化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;串行化是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Durability（持久性）&lt;/strong&gt;：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2分布式事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2分布式事务&#34;&gt;#&lt;/a&gt; 2. 分布式事务&lt;/h2&gt;
&lt;p&gt;分布式事务就是指事务的发起者、资源及资源管理器和事务协调者分别位于分布式系统的不同节点之上，由于分布式应用可能部署在不一样的机器上，所以一般都需要一个事务协调者对事务进行统一调度，来控制事务的提交和撤回，本质上来说，分布式事务就是为了保证在分布式场景下，数据操作的正确执行。&lt;/p&gt;
&lt;p&gt;根据 BASE 理论，分布式事务需要在数据一致性和实时性根据业务需要做出必要协调，基本思想包含以下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;asic &lt;strong&gt;A&lt;/strong&gt;vailability 基本业务可用性&lt;/p&gt;
&lt;p&gt;分布式系统再出现故障时，允许损失部分可用功能，保证核心功能可用，如电商网站交易付款出现问题了，商品浏览仍然可以访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;oft state 柔性事务&lt;/p&gt;
&lt;p&gt;由于不要求强一致性，所以 BASE 系统中允许存在中间状态（也叫软状态），这个状态不影响系统可用性，如订单的 “支付中”，“数据同步中” 等状态，待数据最终一致后，状态改为 “成功” 状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;ventual consistency 最终一致性&lt;/p&gt;
&lt;p&gt;是指经过一段时间后，所有数据都将达到一致。如订单中的 “支付中” 状态，最终会变为 “支付成功” 或 “支付失败”，使订单状态与实际交易结果达成一致，但需要一定的延迟等待&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，分布式事务也遵循 ACID 基本特性，但是在一致性和隔离性方面允许在实时方面做出一定让步&lt;/p&gt;
&lt;h1 id=&#34;二-分布式事务解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-分布式事务解决方案&#34;&gt;#&lt;/a&gt; 二、分布式事务解决方案&lt;/h1&gt;
&lt;p&gt;根据现有的分布式理论和现有的分布式框架，可以归纳以下几种解决方案&lt;/p&gt;
&lt;h2 id=&#34;1两阶段提交-two-phase-commit-又称-xc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1两阶段提交-two-phase-commit-又称-xc&#34;&gt;#&lt;/a&gt; 1. 两阶段提交 (Two Phase Commit, 又称 XC)&lt;/h2&gt;
&lt;p&gt;二阶段提交 (Two-phaseCommit) 是指，在计算机网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时&lt;strong&gt;保持一致性&lt;/strong&gt;而设计的一种算法 (Algorithm)。通常，二阶段提交也被称为是一种协议 (Protocol))。&lt;strong&gt;当一个事务跨越多个节点时&lt;/strong&gt;，&lt;strong&gt;为了保持事务的 ACID 特性&lt;/strong&gt;，需要&lt;strong&gt;引入一个作为协调者的组件 TM (Transaction Manage)&lt;/strong&gt; 来统一掌控所有节点 (称作参与者或者资源管理者&lt;strong&gt; Resource Manage&lt;/strong&gt;) 的操作结果并最终指示这些节点是否要把操作结果进行真正的提交 (比如将更新后的数据写入磁盘等等)。&lt;/p&gt;
&lt;h3 id=&#34;a两阶段说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a两阶段说明&#34;&gt;#&lt;/a&gt; a. 两阶段说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;投票阶段 (Voting Phase 又叫准备阶段)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个阶段由主程序进行 TM 的创建，完成所有 RM 在 TM 上的注册之后完成以下三个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协调者的询问 下图 1 步骤&lt;/li&gt;
&lt;li&gt;资源管理者的事务执行 下图 1.1&lt;/li&gt;
&lt;li&gt;资源管理者反馈执行信息 下图 1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交阶段 (Commit Phase 又叫执行阶段)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	步骤根据准备阶段提交的通知，进行提交或者回滚处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所有 RM 都成功执行，则通知所有节点进行事务提交&lt;/li&gt;
&lt;li&gt;反之有一个或多个 RM 执行失败，则通知所有节点进行回滚操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;&lt;svg id=&#34;mermaid-1656492933899&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;509&#34; style=&#34;max-width: 616.5px;&#34; viewBox=&#34;-50 -10 616.5 509&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor0&#34; x1=&#34;75&#34; y1=&#34;5&#34; x2=&#34;75&#34; y2=&#34;498&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;0&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;事务协调者TM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor1&#34; x1=&#34;431&#34; y1=&#34;5&#34; x2=&#34;431&#34; y2=&#34;498&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;356&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;431&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;431&#34; dy=&#34;0&#34;&gt;资源管理者RM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead&#34; refX=&#34;5&#34; refY=&#34;2&#34; markerWidth=&#34;6&#34; markerHeight=&#34;4&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0,0 V 4 L6,2 Z&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;crosshead&#34; markerWidth=&#34;15&#34; markerHeight=&#34;8&#34; orient=&#34;auto&#34; refX=&#34;16&#34; refY=&#34;4&#34;&gt;&lt;path fill=&#34;black&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 9,2 V 6 L16,4 Z&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;none&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 0,1 L 6,7 M 6,1 L 0,7&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;sequencenumber&#34; refX=&#34;15&#34; refY=&#34;15&#34; markerWidth=&#34;60&#34; markerHeight=&#34;40&#34; orient=&#34;auto&#34;&gt;&lt;circle cx=&#34;15&#34; cy=&#34;15&#34; r=&#34;6&#34;&gt;&lt;/circle&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;text x=&#34;253&#34; y=&#34;80&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;1.询问各个资源管理者是否可以正常执行&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;113&#34; x2=&#34;431&#34; y2=&#34;113&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;431&#34; y=&#34;128&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;1.1 执行事务但不提交&lt;/text&gt;&lt;path d=&#34;M 431,161 C 491,151 491,191 431,181&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/path&gt;&lt;text x=&#34;253&#34; y=&#34;206&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;1.2 所有参与者都能成功执行事务&lt;/text&gt;&lt;line x1=&#34;431&#34; y1=&#34;239&#34; x2=&#34;75&#34; y2=&#34;239&#34; class=&#34;messageLine1&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;stroke-dasharray: 3, 3; fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;253&#34; y=&#34;254&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;2.向所有通知者发送提交通知&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;287&#34; x2=&#34;431&#34; y2=&#34;287&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;431&#34; y=&#34;302&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;2.1 提交事务，释放资源&lt;/text&gt;&lt;path d=&#34;M 431,335 C 491,325 491,365 431,355&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/path&gt;&lt;text x=&#34;253&#34; y=&#34;380&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;2.2 反馈事务执行结果&lt;/text&gt;&lt;line x1=&#34;431&#34; y1=&#34;413&#34; x2=&#34;75&#34; y2=&#34;413&#34; class=&#34;messageLine1&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;stroke-dasharray: 3, 3; fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;rect x=&#34;0&#34; y=&#34;433&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;465.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;事务协调者TM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;356&#34; y=&#34;433&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;431&#34; y=&#34;465.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;431&#34; dy=&#34;0&#34;&gt;资源管理者RM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1）协调者节点向所有参与者节点发出” 正式提交 (commit)” 的请求。&lt;br /&gt;
2）参与者节点正式完成操作，并释放在整个事务期间内占用的资源。&lt;br /&gt;
3）参与者节点向协调者节点发送” 完成” 消息。&lt;br /&gt;
4）协调者节点受到所有参与者节点反馈的” 完成” 消息后，完成事务。&lt;/p&gt;
&lt;p&gt;上图为了表达两阶段的过程，简化实际的步骤，去除了主程序创建 TM 的操作和 RM 注册到 TM 的操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;b两阶段提交的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b两阶段提交的特点&#34;&gt;#&lt;/a&gt; b. 两阶段提交的特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单易理解，开发较容易&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对资源进行了长时间的锁定，并发度低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单点故障问题&lt;/p&gt;
&lt;p&gt;由于协调者的重要性，&lt;strong&gt;一旦协调者发生故障。参与者会一直阻塞下去。&lt;/strong&gt;&lt;br /&gt;
尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于&lt;strong&gt;锁定事务资源的状态中&lt;/strong&gt;，而无法继续完成事务操作&lt;/p&gt;
&lt;p&gt;【协调者发出 Commit 消息&lt;strong&gt;之前&lt;/strong&gt;宕机的情况】&lt;br /&gt;
（如果是协调者挂掉，可以重新选举一个协调者，但是&lt;strong&gt;无法解决因为协调者宕机导致的参与者处于阻塞状态的问题&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据不一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在二阶段提交的&lt;strong&gt;阶段二中&lt;/strong&gt;，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了 commit 请求。而在这部分参与者接到 commit 请求之后就会执行 commit 操作。但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2三阶段提交three-phase-commit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2三阶段提交three-phase-commit&#34;&gt;#&lt;/a&gt; 2. 三阶段提交 (Three Phase Commit)&lt;/h2&gt;
&lt;p&gt;由于二阶段提交存在着诸如&lt;strong&gt;同步阻塞、单点问题、脑裂&lt;/strong&gt;等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三阶段提交（Three-phase commit），也叫三阶段提交协议（Three-phase commit protocol），是二阶段提交（2PC）的改进版本。与两阶段不同的是加入了两个不同点&lt;/p&gt;
&lt;p&gt;1、引入&lt;strong&gt;超时机制&lt;/strong&gt;。同时在协调者和参与者中都引入超时机制。&lt;br /&gt;
2、在第一阶段和第二阶段中插入一个 ** 准备阶段，** 保证了在最后提交阶段之前各参与节点状态的一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;a三阶段定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a三阶段定义&#34;&gt;#&lt;/a&gt; a. 三阶段定义&lt;/h3&gt;
&lt;p&gt;三阶段其实就是把两阶段的投票阶段一分为二，于是有了以下三阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CanCommit 阶段&lt;/li&gt;
&lt;li&gt;PreCommit 阶段&lt;/li&gt;
&lt;li&gt;DoCommit 阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;&lt;svg id=&#34;mermaid-1656492935363&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;683&#34; style=&#34;max-width: 583.5px;&#34; viewBox=&#34;-50 -10 583.5 683&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor0&#34; x1=&#34;75&#34; y1=&#34;5&#34; x2=&#34;75&#34; y2=&#34;672&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;0&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;TM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor1&#34; x1=&#34;306&#34; y1=&#34;5&#34; x2=&#34;306&#34; y2=&#34;672&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;231&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;306&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;306&#34; dy=&#34;0&#34;&gt;RM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead&#34; refX=&#34;5&#34; refY=&#34;2&#34; markerWidth=&#34;6&#34; markerHeight=&#34;4&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0,0 V 4 L6,2 Z&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;crosshead&#34; markerWidth=&#34;15&#34; markerHeight=&#34;8&#34; orient=&#34;auto&#34; refX=&#34;16&#34; refY=&#34;4&#34;&gt;&lt;path fill=&#34;black&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 9,2 V 6 L16,4 Z&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;none&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 0,1 L 6,7 M 6,1 L 0,7&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;sequencenumber&#34; refX=&#34;15&#34; refY=&#34;15&#34; markerWidth=&#34;60&#34; markerHeight=&#34;40&#34; orient=&#34;auto&#34;&gt;&lt;circle cx=&#34;15&#34; cy=&#34;15&#34; r=&#34;6&#34;&gt;&lt;/circle&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;text x=&#34;191&#34; y=&#34;80&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;第一阶段：canCommit&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;113&#34; x2=&#34;306&#34; y2=&#34;113&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;306&#34; y=&#34;128&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;检查时候能执行事务&lt;/text&gt;&lt;path d=&#34;M 306,161 C 366,151 366,191 306,181&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/path&gt;&lt;text x=&#34;191&#34; y=&#34;206&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;yes&lt;/text&gt;&lt;line x1=&#34;306&#34; y1=&#34;239&#34; x2=&#34;75&#34; y2=&#34;239&#34; class=&#34;messageLine1&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;stroke-dasharray: 3, 3; fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;191&#34; y=&#34;254&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;第二阶段：preCommit&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;287&#34; x2=&#34;306&#34; y2=&#34;287&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;306&#34; y=&#34;302&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;执行事务操作，将undo和redo信息记录到事务日志&lt;/text&gt;&lt;path d=&#34;M 306,335 C 366,325 366,365 306,355&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/path&gt;&lt;text x=&#34;191&#34; y=&#34;380&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Ack&lt;/text&gt;&lt;line x1=&#34;306&#34; y1=&#34;413&#34; x2=&#34;75&#34; y2=&#34;413&#34; class=&#34;messageLine1&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;stroke-dasharray: 3, 3; fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;191&#34; y=&#34;428&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;第三阶段：doCommit&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;461&#34; x2=&#34;306&#34; y2=&#34;461&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;306&#34; y=&#34;476&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;提交事务&lt;/text&gt;&lt;path d=&#34;M 306,509 C 366,499 366,539 306,529&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/path&gt;&lt;text x=&#34;191&#34; y=&#34;554&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;commited&lt;/text&gt;&lt;line x1=&#34;306&#34; y1=&#34;587&#34; x2=&#34;75&#34; y2=&#34;587&#34; class=&#34;messageLine1&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;stroke-dasharray: 3, 3; fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;rect x=&#34;0&#34; y=&#34;607&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;639.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;TM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;231&#34; y=&#34;607&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;306&#34; y=&#34;639.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;306&#34; dy=&#34;0&#34;&gt;RM&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么要把投票阶段一分为二？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设有 1 个协调者，9 个参与者。其中有一个参与者不具备执行该事务的能力。&lt;/strong&gt;&lt;br /&gt;
协调者发出 prepare 消息之后，其余参与者都将资源锁住，执行事务，写入 undo 和 redo 日志。&lt;br /&gt;
协调者收到相应之后，发现有一个参与者不能参与。所以，又出一个 roolback 消息。其余 8 个参与者，又对消息进行回滚。这样子，是不是做了很多无用功？&lt;br /&gt;
所以 **，** 引入 can-Commit 阶段，&lt;strong&gt;主要是为了在预执行之前，保证所有参与者都具备可执行条件，从而减少资源浪费。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;b具体执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b具体执行过程&#34;&gt;#&lt;/a&gt; b. 具体执行过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CanCommit 阶段&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3PC 的 CanCommit 阶段其实和 2PC 的准备阶段很像。协调者向参与者发送 commit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 事务询问&lt;/strong&gt; 协调者向参与者发送 CanCommit 请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。&lt;br /&gt;
&lt;strong&gt;2. 响应反馈&lt;/strong&gt; 参与者接到 CanCommit 请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回 Yes 响应，并进入预备状态。否则反馈 No&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PreCommit 阶段&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本阶段协调者会根据第一阶段的询盘结果采取相应操作，询盘结果主要有两种：&lt;/p&gt;
&lt;p&gt;** 情况 1-** 假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务的预执行：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 发送预提交请求&lt;/strong&gt; 协调者向参与者发送 PreCommit 请求，并进入 Prepared 阶段。&lt;br /&gt;
&lt;strong&gt;2. 事务预提交&lt;/strong&gt; 参与者接收到 PreCommit 请求后，会执行事务操作，并将 undo 和 redo 信息记录到事务日志中。&lt;br /&gt;
&lt;strong&gt;3. 响应反馈&lt;/strong&gt; 如果参与者成功的执行了事务操作，则返回 ACK 响应，同时开始等待最终指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 情况 2-** 假如有任何一个参与者向协调者发送了 No 响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。具体步骤如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 发送中断请求&lt;/strong&gt; 协调者向所有参与者发送 abort 请求。&lt;br /&gt;
&lt;strong&gt;2. 中断事务&lt;/strong&gt; 参与者收到来自协调者的 abort 请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;doCommit 阶段&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该阶段进行真正的事务提交，也可以分为以下两种情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况 1 - 执行提交&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对第一种情况，协调者向各个参与者发起事务提交请求，具体步骤如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 协调者向所有参与者发送事务 commit 通知&lt;br /&gt;
 2. 所有参与者在收到通知之后执行 commit 操作，并释放占有的资源&lt;br /&gt;
 3. 参与者向协调者反馈事务提交结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;情况 2 - 中断事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;协调者没有接收到参与者发送的 ACK 响应（可能是接受者发送的不是 ACK 响应，也可能响应超时），那么就会执行中断事务。具体步骤如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.&lt;strong&gt; 发送中断请求&lt;/strong&gt; 协调者向所有参与者发送事务 rollback 通知。&lt;br /&gt;
2.&lt;strong&gt; 事务回滚&lt;/strong&gt; 所有参与者在收到通知之后执行 rollback 操作，并释放占有的资源。&lt;br /&gt;
3.&lt;strong&gt; 反馈结果&lt;/strong&gt; 参与者向协调者反馈事务提交结果。&lt;br /&gt;
4.&lt;strong&gt; 中断事务&lt;/strong&gt; 协调者接收到参与者反馈的 ACK 消息之后，执行事务的中断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3saga&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3saga&#34;&gt;#&lt;/a&gt; 3.SAGA&lt;/h2&gt;
&lt;h3 id=&#34;a基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a基本概念&#34;&gt;#&lt;/a&gt; a. 基本概念&lt;/h3&gt;
&lt;p&gt;Saga 是这一篇数据库论文 saga 提到的一个方案。其核心思想是将长事务拆分为多个本地短事务，由 Saga 事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。&lt;/p&gt;
&lt;p&gt;在 Saga 模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;可补偿事务&lt;/em&gt; 是通过处理另一个具有相反效果的事务来撤消的事务。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;透视事务&lt;/em&gt;是传奇中的 go/no-go 点。 如果透视事务提交，则 saga 将运行到完成为止。 透视事务可以是既不可补偿也不可重试的事务，也可以是最后一个可补偿事务，也可以是传奇中的第一个可重试事务。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可重试事务&lt;/em&gt; 是遵循透视事务且保证成功事务的事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有两种常见的传奇实现方法， &lt;em&gt;即编舞&lt;/em&gt; 和 &lt;em&gt;业务流程&lt;/em&gt;。 每个方法都有自己的一组挑战和技术来协调工作流。&lt;/p&gt;
&lt;h3 id=&#34;bsaga事务的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bsaga事务的特点&#34;&gt;#&lt;/a&gt; b.SAGA 事务的特点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并发度高，不用像 XA 事务那样长期锁定资源&lt;/li&gt;
&lt;li&gt;需要定义正常操作以及补偿操作，开发量比 XA 大&lt;/li&gt;
&lt;li&gt;一致性较弱，对于转账，可能发生 A 用户已扣款，最后转账又失败的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;论文里面的 SAGA 内容较多，包括两种恢复策略，包括分支事务并发执行，我们这里的讨论，仅包括最简单的 SAGA&lt;/p&gt;
&lt;p&gt;SAGA 适用的场景较多，长事务适用，对中间结果不敏感的业务场景适用&lt;/p&gt;
&lt;p&gt;如果读者想要进一步研究 SAGA，go 语言可参考 DTM，java 语言可参考 seata&lt;/p&gt;
&lt;h2 id=&#34;4tcc-try-confirm-cancel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4tcc-try-confirm-cancel&#34;&gt;#&lt;/a&gt; 4.TCC (Try-Confirm-Cancel)&lt;/h2&gt;
&lt;h3 id=&#34;a基本概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a基本概念-2&#34;&gt;#&lt;/a&gt; a. 基本概念&lt;/h3&gt;
&lt;p&gt;关于 TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/06/seata_tcc-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCC 分为 3 个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）&lt;/li&gt;
&lt;li&gt;Confirm 阶段：确认执行真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源，Confirm     操作要求具备幂等设计，Confirm 失败后需要进行重试。&lt;/li&gt;
&lt;li&gt;Cancel 阶段：取消执行，释放 Try 阶段预留的业务资源。Cancel 阶段的异常和 Confirm     阶段异常处理方案基本上一致，要求满足幂等设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把上面商城下单为例，在 try 阶段会冻结商品的库存数量，并不真正减少库存，而是在 Confirm 里面进行库存的扣减，Cancel 里进行库存解冻。&lt;/p&gt;
&lt;pre class=&#34;mermaid graph&#34;&gt;&lt;svg id=&#34;mermaid-1656492937230&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; height=&#34;113&#34; style=&#34;max-width: 559.515625px;&#34; viewBox=&#34;0 1 559.515625 113&#34;&gt;&lt;g&gt;&lt;g class=&#34;output&#34;&gt;&lt;g class=&#34;clusters&#34;&gt;&lt;/g&gt;&lt;g class=&#34;edgePaths&#34;&gt;&lt;g class=&#34;edgePath LS-A LE-B&#34; id=&#34;L-A-B&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M112.40625,37.46713409290096L167.171875,17.5L226.28125,37&#34; marker-end=&#34;url(#arrowhead20)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead20&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-B LE-C&#34; id=&#34;L-B-C&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M348.84375,56.5L401.4609375,56.5L454.078125,56.5&#34; marker-end=&#34;url(#arrowhead21)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead21&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-B LE-A&#34; id=&#34;L-B-A&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M221.9375,56.5L167.171875,56.5L112.40625,56.5&#34; marker-end=&#34;url(#arrowhead22)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead22&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-B LE-A&#34; id=&#34;L-B-A&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M226.28125,76L167.171875,95.5L112.40625,75.53286590709904&#34; marker-end=&#34;url(#arrowhead23)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead23&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabels&#34;&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(167.171875,17.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-10.28125,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;20.5625&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;try&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(401.4609375,56.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-27.6171875,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;55.234375&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;confirm&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(167.171875,56.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-24.1875,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;48.375&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;Cancel&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(167.171875,95.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-29.765625,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;59.53125&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;Timeout&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;nodes&#34;&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-A-8&#34; transform=&#34;translate(60.203125,56.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-52.203125&#34; y=&#34;-19.5&#34; width=&#34;104.40625&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-42.203125,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;Initial State&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-B-9&#34; transform=&#34;translate(285.390625,56.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-63.453125&#34; y=&#34;-19.5&#34; width=&#34;126.90625&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-53.453125,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;Reserved State&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-C-11&#34; transform=&#34;translate(502.796875,56.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-48.71875&#34; y=&#34;-19.5&#34; width=&#34;97.4375&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-38.71875,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;Final State&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;&lt;h3 id=&#34;btcc特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#btcc特点&#34;&gt;#&lt;/a&gt; b.TCC 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;并发度较高，无长期资源锁定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发量较大，需要提供 Try/Confirm/Cancel 接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性较好，不会发生 SAGA 已扣款最后又转账失败的情况&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCC 适用于订单类业务，对中间状态有约束的业务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若【发起方】/【参与方】因崩溃遗失了信息，则会造成有的【参与方】已 Confirm，有的【参与方】则被 Cancel 了，甚至于依然保持在预留状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5本地消息表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5本地消息表&#34;&gt;#&lt;/a&gt; 5. 本地消息表&lt;/h2&gt;
&lt;p&gt;本地消息表这个方案最初是 ebay 架构师 Dan Pritchett 在 2008 年发表给 ACM 的文章。设计核心是将需要分布式处理的任务通过消息的方式来异步确保执行。&lt;/p&gt;
&lt;p&gt;以前面商城下单为例，本地消息表的执行过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/06/20220622170428.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;写本地消息和业务操作放在一个事务里，保证了业务和发消息的原子性，要么他们全都成功，要么全都失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容错机制：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扣减余额事务 失败时，事务直接回滚，无后续步骤&lt;/li&gt;
&lt;li&gt;轮序生产消息失败， 增加余额事务失败都会进行重试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本地消息表的特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长事务仅需要分拆成多个任务，使用简单&lt;/li&gt;
&lt;li&gt;生产者需要额外的创建消息表&lt;/li&gt;
&lt;li&gt;每个本地消息表都需要进行轮询&lt;/li&gt;
&lt;li&gt;消费者的逻辑如果无法通过重试成功，那么还需要更多的机制，来回滚操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于可异步执行的业务，且后续操作无需回滚的业务&lt;/p&gt;
&lt;h2 id=&#34;6事务消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6事务消息&#34;&gt;#&lt;/a&gt; 6. 事务消息&lt;/h2&gt;
&lt;p&gt;在上述的本地消息表方案中，生产者需要额外创建消息表，还需要对本地消息表进行轮询，业务负担较重。阿里开源的 RocketMQ 4.3 之后的版本正式支持事务消息，该事务消息本质上是把本地消息表放到 RocketMQ 上（实际上就是把上图 2 的步骤使用支持事务的消息队列替换），解决生产端的消息发送与本地事务执行的原子性问题。&lt;/p&gt;
&lt;p&gt;事务消息发送及提交：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送消息（half 消息）&lt;/li&gt;
&lt;li&gt;服务端存储消息，并响应消息的写入结果&lt;/li&gt;
&lt;li&gt;根据发送结果执行本地事务（如果写入失败，此时 half 消息对业务不可见，本地逻辑不执行）&lt;/li&gt;
&lt;li&gt;根据本地事务状态执行 Commit 或者 Rollback（Commit 操作发布消息，消息对消费者可见）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补偿流程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对没有 Commit/Rollback 的事务消息（pending 状态的消息），从服务端发起一次 “回查”&lt;/p&gt;
&lt;p&gt;Producer 收到回查消息，返回消息对应的本地事务的状态，为 Commit 或者 Rollback&lt;/p&gt;
&lt;p&gt;事务消息方案与本地消息表机制非常类似，区别主要在于原先相关的本地表操作替换成了一个反查接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务消息特点如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长事务仅需要分拆成多个任务，并提供一个反查接口，使用简单&lt;/li&gt;
&lt;li&gt;消费者的逻辑如果无法通过重试成功，那么还需要更多的机制，来回滚操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于可异步执行的业务，且后续操作无需回滚的业务&lt;/p&gt;
&lt;p&gt;如果读者想要进一步研究事务消息，可参考 rocketmq，为了方便大家学习事务消息，DTM 也提供了简单实现&lt;/p&gt;
&lt;h2 id=&#34;7最大努力通知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7最大努力通知&#34;&gt;#&lt;/a&gt; 7. 最大努力通知&lt;/h2&gt;
&lt;p&gt;发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。具体包括：&lt;/p&gt;
&lt;p&gt;有一定的消息重复通知机制。因为接收通知方可能没有接收到通知，此时要有一定的机制对消息重复通知。&lt;/p&gt;
&lt;p&gt;消息校对机制。如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询消息信息来满足需求。&lt;/p&gt;
&lt;p&gt;前面介绍的的本地消息表和事务消息都属于可靠消息，与这里介绍的最大努力通知有什么不同？&lt;/p&gt;
&lt;p&gt;可靠消息一致性，发起通知方需要保证将消息发出去，并且将消息发到接收通知方，消息的可靠性关键由发起通知方来保证。&lt;/p&gt;
&lt;p&gt;最大努力通知，发起通知方尽最大的努力将业务处理结果通知为接收通知方，但是可能消息接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性关键在接收通知方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案上，最大努力通知需要：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供接口，让接受通知放能够通过接口查询业务处理结果&lt;/li&gt;
&lt;li&gt;消息队列 ACK 机制，消息队列按照间隔 1min、5min、10min、30min、1h、2h、5h、10h 的方式，逐步拉大通知间隔     ，直到达到通知要求的时间窗口上限。之后不再通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最大努力通知适用于业务通知类型，例如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口&lt;/p&gt;
&lt;h2 id=&#34;8at事务模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8at事务模式&#34;&gt;#&lt;/a&gt; 8.AT 事务模式&lt;/h2&gt;
&lt;p&gt;这是阿里开源项目 seata 中的一种事务模式，在蚂蚁金服也被称为 FMT。优点是该事务模式使用方式，类似 XA 模式，业务无需编写各类补偿操作，回滚由框架自动完成，缺点也类似 AT，存在较长时间的锁，不满足高并发的场景。有兴趣的同学可以参考 seata-AT&lt;/p&gt;
&lt;h1 id=&#34;三-分布式事务中的异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-分布式事务中的异常处理&#34;&gt;#&lt;/a&gt; 三、分布式事务中的异常处理&lt;/h1&gt;
&lt;p&gt;分布式事务中，会由于网络和业务异常问题导致 TM 和 RM 之间的通信问题，主要包括下面三类：&lt;/p&gt;
&lt;h2 id=&#34;空回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空回滚&#34;&gt;#&lt;/a&gt; 空回滚&lt;/h2&gt;
&lt;p&gt;在没有调用 TCC 资源 Try 方法的情况下，调用了二阶段的 Cancel 方法，Cancel 方法需要识别出这是一个空回滚，然后直接返回成功。&lt;/p&gt;
&lt;p&gt;出现原因是当一个分支事务所在服务宕机或网络异常，分支事务调用记录为失败，这个时候其实是没有执行 Try 阶段，当故障恢复后，分布式事务进行回滚则会调用二阶段的 Cancel 方法，从而形成空回滚。&lt;/p&gt;
&lt;h2 id=&#34;幂等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#幂等&#34;&gt;#&lt;/a&gt; 幂等&lt;/h2&gt;
&lt;p&gt;由于任何一个请求都可能出现网络异常，出现重复请求，所以所有的分布式事务分支，都需要保证幂等性&lt;/p&gt;
&lt;h2 id=&#34;悬挂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#悬挂&#34;&gt;#&lt;/a&gt; 悬挂&lt;/h2&gt;
&lt;p&gt;悬挂就是对于一个分布式事务，其二阶段 Cancel 接口比 Try 接口先执行。&lt;/p&gt;
&lt;p&gt;出现原因是在 RPC 调用分支事务 try 时，先注册分支事务，再执行 RPC 调用，如果此时 RPC 调用的网络发生拥堵，RPC 超时以后，TM 就会通知 RM 回滚该分布式事务，可能回滚完成后，RPC 请求才到达参与者真正执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文章：&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI4MTE4MDUvYXJ0aWNsZS9kZXRhaWxzLzEyMTMxMzAwNg==&#34;&gt;分布式事务七种解决方案，最后一种经典了！_独行侠梦的博客 - CSDN 博客&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTYxNjgxMA==&#34;&gt;分布式一致性之两阶段提交协议、三阶提交协议 - 知乎 (zhihu.com)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/55b5aa61</guid>
            <title>说一说微服务网关</title>
            <link>https://blog.liq2.com/article/55b5aa61</link>
            <category term="后端" scheme="https://blog.liq2.com/categories/backend/" />
            <category term="Java" scheme="https://blog.liq2.com/categories/backend/java/" />
            <category term="微服务" scheme="https://blog.liq2.com/categories/backend/java/micro-service/" />
            <category term="微服务中间件" scheme="https://blog.liq2.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/" />
            <category term="Spring Cloud" scheme="https://blog.liq2.com/tags/Spring-Cloud/" />
            <pubDate>Tue, 21 Jun 2022 18:18:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;什么是微服务网关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是微服务网关&#34;&gt;#&lt;/a&gt; 什么是微服务网关？&lt;/h1&gt;
&lt;p&gt;微服务网关是微服务架构系统的唯一入口，能把系统的能力统一经过它对客户端进行开放，类似于面向对象的封装，提供统一的入口，具体里面的业务方法是怎样实现并不公开，只不过网关封装了系统内部架构，为每个客户端提供一个定制的 API。&lt;/p&gt;
&lt;p&gt;基于他是所有 API 的入口这个特性， 所以它可以方便的全局实现如身份验证 (黑白名单)、监控、负载均衡、缓存、协议转换、限流熔断、灰度发布等功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;微服务网关作为连接服务的消费方和服务提供方的中间件系统，将各自的业务系统的演进和发展做了天然的隔离，使业务系统更加专注于业务服务本身，同时微服务网关还可以为服务提供和沉淀更多附加功能&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它的主要作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;请求接入&lt;/p&gt;
&lt;p&gt;管理所有接入请求，作为所有 API 请求的入口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务聚合&lt;/p&gt;
&lt;p&gt;所有微服务后端可以注册在 API 网关，通过 API 网关统一暴露服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拦截策略&lt;/p&gt;
&lt;p&gt;可以提供统一增加安全、路由、流控、负载均衡等公共服务组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一管理&lt;/p&gt;
&lt;p&gt;提供统一监控管理工具，配置管理工具，Swagger 工具等设施&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1过滤器与网关的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1过滤器与网关的区别&#34;&gt;#&lt;/a&gt; 1. 过滤器与网关的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;过滤器只适合当个服务的过滤请求&lt;/li&gt;
&lt;li&gt;网关能拦截整个微服务，实现过滤请求，能够解决整个微服务中的冗余代码&lt;/li&gt;
&lt;li&gt;过滤器是局部拦截，网关是全局拦截&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-zuul与gateway有哪些区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-zuul与gateway有哪些区别&#34;&gt;#&lt;/a&gt; 2. Zuul 与 Gateway 有哪些区别&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Zuul&lt;/th&gt;
&lt;th&gt;GateWay&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;基本说明&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Zuul 是属于 netflix 公司的开源产品属于第一代网关&lt;/td&gt;
&lt;td&gt;Gateway 属于 SpringCloud 自研发的网关框架，属于第二代微服务网关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;底层实现&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Zuul 网关底层基于 Servlet 实现的，处理 http 请求，阻塞式的 Api&lt;/td&gt;
&lt;td&gt;基于 netty 环境依赖 SpringBoot-WebFux，非阻塞式 API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;长连接支持&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;负载均衡支持&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果需要负载均衡，需要额外集成其他负载均衡框架，可以扩展至其他微服务框架中&lt;/td&gt;
&lt;td&gt;提供了抽象负载均衡，提供了抽象流控，并默认实现了 RedisRateLimiter，仅适合于 Spring Cloud 套件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总体来说，由于 Spring gateway 使用了支持 NIO 处理的 Netty 容器，能够非阻塞的处理客户端请求，消耗硬件资源会比 Zuul 更少，效率相对较高，同时本身支持对请求的负载均衡和限流，所以他是在 Spring Cloud 项目中的不二选择&lt;/p&gt;
&lt;h1 id=&#34;如何使用spring-gateway&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用spring-gateway&#34;&gt;#&lt;/a&gt; 如何使用 Spring Gateway&lt;/h1&gt;
&lt;h2 id=&#34;1添加依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1添加依赖&#34;&gt;#&lt;/a&gt; 1. 添加依赖&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2.0.0.RELEASE&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-starter-gateway&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2.0.0.RELEASE&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-cloud-starter-loadbalancer&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;2添加配置文件applicationyml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2添加配置文件applicationyml&#34;&gt;#&lt;/a&gt; 2. 添加配置文件 application.yml&lt;/h2&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6001&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; bo&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;spring&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;gateway&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;override-system-properties&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;override-none&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;discovery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;locator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; api&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;management&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lb&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//api&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;management&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Path=/api&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;web&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;management/&lt;span class=&#34;token important&#34;&gt;**&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;integrated&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;auth&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lb&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;integrated&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;auth&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Path=/center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;integrated&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;auth/&lt;span class=&#34;token important&#34;&gt;**&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;base&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; lb&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;base&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token key atrule&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Path=/center&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;base/&lt;span class=&#34;token important&#34;&gt;**&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3编写启动类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3编写启动类&#34;&gt;#&lt;/a&gt; 3. 编写启动类&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SpringGatewayApplication&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SpringGatewayApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;由于gateway不依赖于serverlet，注意项目启动之前检查是否去除对serverlet的依赖&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4常用的断言和过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4常用的断言和过滤器&#34;&gt;#&lt;/a&gt; 4. 常用的断言和过滤器&lt;/h2&gt;
&lt;h3 id=&#34;断言predicates&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#断言predicates&#34;&gt;#&lt;/a&gt; 断言 Predicates&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;- Path=/gate/&lt;strong&gt;,/rule/&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;## 当请求的路径为 gate、rule 开头的时，转发到 http://localhost:9023 服务器上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Before&lt;/td&gt;
&lt;td&gt;- Before=2017-01-20T17:42:47.789-07:00[America/Denver]&lt;/td&gt;
&lt;td&gt;在某个时间之前的请求才会被转发到 http://localhost:9023 服务器上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;After&lt;/td&gt;
&lt;td&gt;- After=2017-01-20T17:42:47.789-07:00[America/Denver]&lt;/td&gt;
&lt;td&gt;在某个时间之后的请求才会被转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Between&lt;/td&gt;
&lt;td&gt;- Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]&lt;/td&gt;
&lt;td&gt;在某个时间段之间的才会被转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;- Cookie=chocolate, ch.p&lt;/td&gt;
&lt;td&gt;名为 chocolate 的表单或者满足正则 ch.p 的表单才会被匹配到进行请求转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Header&lt;/td&gt;
&lt;td&gt;- Header=X-Request-Id, \d+&lt;/td&gt;
&lt;td&gt;携带参数 X-Request-Id 或者满足 \d + 的请求头才会匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;- &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0hvc3Q9d3d3LmhkMTIzLmNvbQ==&#34;&gt;Host=www.hd123.com&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;当主机名为 www.hd123.com 的时候直接转发到 http://localhost:9023 服务器上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;- Method=GET&lt;/td&gt;
&lt;td&gt;只有 GET 方法才会匹配转发请求，还可以限定 POST、PUT 等请求方式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用示例&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; query_route&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//example.org&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Method=GET&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;过滤器filter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤器filter&#34;&gt;#&lt;/a&gt; 过滤器 Filter&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;过滤规则&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PrefixPath&lt;/td&gt;
&lt;td&gt;- PrefixPath=/app&lt;/td&gt;
&lt;td&gt;在请求路径前加上 app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RewritePath&lt;/td&gt;
&lt;td&gt;- RewritePath=/test, /app/test&lt;/td&gt;
&lt;td&gt;访问 localhost:9022/test, 请求会转发到 localhost:8001/app/test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SetPath&lt;/td&gt;
&lt;td path=&#34;&#34;&gt;SetPath=/app/&lt;/td&gt;
&lt;td&gt;通过模板设置路径，转发的规则时会在路径前增加 app，{path} 表示原请求路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RedirectTo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;重定向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RemoveRequestHeader&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;去掉某个请求头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;过滤器常用的是请求地址的重写&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; rewrite_filter&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; http&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8081&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;predicates&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; Path=/test/&lt;span class=&#34;token important&#34;&gt;**&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; RewritePath=/where(&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;&amp;lt;segment&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;/&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;.&lt;span class=&#34;token important&#34;&gt;*)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; /test(&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;&amp;lt;segment&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;/&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;.&lt;span class=&#34;token important&#34;&gt;*)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/adf95138</guid>
            <title>Promise,async,await学习总结</title>
            <link>https://blog.liq2.com/article/adf95138</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="基础知识" scheme="https://blog.liq2.com/categories/frontend/fundation/" />
            <category term="javascript" scheme="https://blog.liq2.com/tags/javascript/" />
            <pubDate>Sat, 28 May 2022 16:08:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-promise的2w1h&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-promise的2w1h&#34;&gt;#&lt;/a&gt; 一、Promise 的 2W1H&lt;/h2&gt;
&lt;h3 id=&#34;w1-什么是promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#w1-什么是promise&#34;&gt;#&lt;/a&gt; W1 什么是 Promise&lt;/h3&gt;
&lt;p&gt;Promise 是一个函数，为了解决回调地狱的一个函数，它在 js 中进行异步编程的新解决方案；它有三个状态和两个改变状态的方法，以及三个 Promise 常用的方法&lt;/p&gt;
&lt;h5 id=&#34;三个状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三个状态&#34;&gt;#&lt;/a&gt; 三个状态&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;pengding  执行中&lt;/li&gt;
&lt;li&gt;fulfilled  已成功，正常完成&lt;/li&gt;
&lt;li&gt;rejected  已失败，执行以错误结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;两个改变状态的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个改变状态的方法&#34;&gt;#&lt;/a&gt; 两个改变状态的方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;resolve ()   把状态改成 fullfilled&lt;/li&gt;
&lt;li&gt;reject () 把状态改成 rejected&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;三个常用的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三个常用的方法&#34;&gt;#&lt;/a&gt; 三个常用的方法&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;then()&lt;/li&gt;
&lt;li&gt;catch()&lt;/li&gt;
&lt;li&gt;finally()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;w2-什么时候使用promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#w2-什么时候使用promise&#34;&gt;#&lt;/a&gt; W2 什么时候使用 Promise？&lt;/h3&gt;
&lt;p&gt;解决多层套娃的异步调用导致项目代码向右下漂移，以一种只向下扩展的方式使得代码看上去就像不是异步代码一样，读起来不费劲，更优雅一些；&lt;/p&gt;
&lt;p&gt;不使用 Promise 的代码如&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第一次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第二次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第三次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;一层套一层，右下漂移了！！😲 通过 Promise 改造，可以得到以下样子的代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第一次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第二次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第三次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看上去是不是心情好得多呢，甚至可以进一步优化成下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;logContent&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;intevel&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;logContent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;intevel&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;createTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第一次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第二次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;套娃第三次开始&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个代码看上去就赏心悦目多了✌️&lt;/p&gt;
&lt;h3 id=&#34;1h-如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1h-如何使用&#34;&gt;#&lt;/a&gt; 1H 如何使用&lt;/h3&gt;
&lt;p&gt;如 W2 的第二部分代码可以看到，可以通过 new 的方式构造一个 Promise, 其中构造函数传入一个函数，这个函数带入两个参数 (resolve, reject)，他们就是 W1 里面所说的两个改变状态的方法 🌹&lt;/p&gt;
&lt;p&gt;如果方法体正常完成，则调用一下 resolve (),  失败就调用一下 reject ();&lt;/p&gt;
&lt;h2 id=&#34;二-使用详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-使用详解&#34;&gt;#&lt;/a&gt; 二、使用详解&lt;/h2&gt;
&lt;h3 id=&#34;如何参数传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何参数传递&#34;&gt;#&lt;/a&gt; 如何参数传递？&lt;/h3&gt;
&lt;p&gt;上面说的方法体内容里面其实是没有传参数到下一个异步执行的方法？自然是直接放到 resolve ()，然后下一步通过 then () 的形参方法参数直接传入到下一个异步执行的方法体，比如我们常需要在项目中拿到用户信息之后，根据用户 id 拿到角色列表，这肯定就需要第一次异步请求拿到的用户 Id，传入第二次异步请求&lt;/p&gt;
&lt;p&gt;我们假设 &lt;code&gt;user.json&lt;/code&gt;  和  &lt;code&gt;role.json&lt;/code&gt;  请求返回的结果分别为&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//user.json&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;userId&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;张三&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//role.json?userId=666&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;userId&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;roles&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;管理员&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;普通用户&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; params&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 用了 jQuery 的 ajax 方法，调试的话请先引入 jQuery&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        $&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GET&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function-variable function&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;user.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;userInfo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; userInfo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;用户ID:  &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;role.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;roleData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;roleData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如上上面通过 resolve 方法把 ajax 请求的结果传给了 then, 在 then 的参数分别通过 userInfo 和 roleData 接收，然后对数据进行了进一步的处理；&lt;/p&gt;
&lt;h3 id=&#34;什么时候使用reject&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么时候使用reject&#34;&gt;#&lt;/a&gt; 什么时候使用 reject ()&lt;/h3&gt;
&lt;p&gt;说清楚这个问题之前，先说一下 W1 里面说的三个状态，pengding  执行中，fulfilled 已成功，rejected  已失败，执行中基本上不用关注，我们通过执行下面代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后浏览器 F12 查看打印结果可以发现 Promise 是这样的，这个 Promise 对象的状态 PromiseState 是 pengding&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220528211529.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我们通过在方法体调用 resolve ()&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发现此时 PromiseState 的状态已经改成 fulfilled；&lt;/p&gt;
&lt;p&gt;如果调用 reject ()&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发现 PromiseState 已经改成为 rejected，这就是 Promise 的三种状态和两种改变状态的方法，那么既然 resolve 表示正常的时候执行，并且可以把执行结果传入到下一次异步调用进行使用，那么 reject 方法能传值吗？传的值去哪里了？怎么接收？&lt;/p&gt;
&lt;p&gt;答案三连：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能传值&lt;/li&gt;
&lt;li&gt;reject 代表执行过程出现错误了，自然是给接收错误的地方&lt;/li&gt;
&lt;li&gt;通过 catch () 方法接收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样我们通过上面的例子，假如 &lt;code&gt;user.json&lt;/code&gt;  由于服务器或者网络原因不能被调用了，我们需要在 ajax 的方法加上一个出现错误的处理情况&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; params&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 用了 jQuery 的 ajax 方法，调试的话请先引入 jQuery&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        $&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GET&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function-variable function&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function-variable function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 这里加上执行错误的处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用超时或者服务器错误&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;user1.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 直接把调用改成不存在的 user1.json&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;userInfo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; userInfo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;用户ID:  &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;role.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;roleData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;roleData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;接收的错误消息： &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过上面的代码，我们发现 reject 传入的消息通过 catch 方法接收了，这就是三大方法中的 then 方法和 catch 方法了，剩下一个 finally () 意思就是无论执行过程中是否正常执行，都会执行里面的代码，和 java 的 finally 代码意思一致，这里需要说明的是&lt;strong&gt; catch 方法，除了能捕获 reject () 调用改变 Promise 状态的结果之外，还能能捕获上面所有执行的异步代码块的问题&lt;/strong&gt;，如果前面的异步方法执行发生错误，后面的 then () 不会被执行。&lt;/p&gt;
&lt;h2 id=&#34;三-async和await的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-async和await的使用&#34;&gt;#&lt;/a&gt; 三、async 和 await 的使用&lt;/h2&gt;
&lt;p&gt;简单说这两个关键字是基于 Promise 之上的语法糖，它们能使得对异步的操作更加简洁明了&lt;/p&gt;
&lt;h3 id=&#34;async和await的基本使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#async和await的基本使用&#34;&gt;#&lt;/a&gt; async 和 await 的基本使用&lt;/h3&gt;
&lt;p&gt;我们可以对方法名进行 async 修饰，标记这个方法为异步方法， 意思就是这个行数返回的值是 Promise 对象&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;async function result&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;比如上面的代码的打印结果就是一个 Promise 结果为 &lt;code&gt;&amp;quot;async function result&amp;quot;&lt;/code&gt;  这个字符串，状态 &lt;code&gt;fulfilled&lt;/code&gt;  的 Promise 对象；&lt;/p&gt;
&lt;p&gt;如果我们要在这个方法里面对异步方法结果进行操作，则可以通过下面的方式使用异步方法执行之后的结果，这个例子我们使用上面的 getData 方法&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;await请求结果： &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;后面执行的代码&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;题外：上面方法没有返回结果，想想打印出来的结果是什么？&lt;/code&gt; 😃&lt;/p&gt;
&lt;p&gt;这里虽然加上了 await，代码看上去也非常像是同步的代码，会暂停程序的往下执行，但在等待的过程中 javascript 还可以同时处理其他的任务，比如界面的更新，执行其他的程序代码等，如上面代码中最后一行的打印会在 async 方法打印之前打印出来&lt;/p&gt;
&lt;h3 id=&#34;await使用陷阱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#await使用陷阱&#34;&gt;#&lt;/a&gt; await 使用陷阱&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;为保证效率可以组合使用之后再用await方法比如&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为保证效率可以组合使用之后再用await方法比如&#34;&gt;#&lt;/a&gt; 为保证效率，可以组合使用之后再用 await 方法，比如&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; user1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user1.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; user2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user2.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 下面省略对 res1 和 res2 的操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//.....&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以使用以下方式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; res1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user1.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; res2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user2.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;user1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;user2&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; Promist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;promiseAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;res1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;res2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 下面省略对 res1 和 res2 的操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//.....&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;效率理论上能提升一倍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;循环中使用异步操作不能调用foreachmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环中使用异步操作不能调用foreachmap&#34;&gt;#&lt;/a&gt; 循环中使用异步操作，不能调用 forEach ()/map ()&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;element &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; - &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; userId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;the end&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如上第二行代码不会等到所有代码执行完毕再执行，而是马上执行后面的 &lt;code&gt;&amp;quot;the end&amp;quot;&lt;/code&gt;  输出，尽管使用了 await 进行修饰，可以使用传统的 for 循环来达到我们先要的效果&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;userId&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user.json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; - &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; userId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;the end&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;myFunc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;不能在全局和普通函数中使用await必须在async修饰的函数体里面使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不能在全局和普通函数中使用await必须在async修饰的函数体里面使用&#34;&gt;#&lt;/a&gt; 不能在全局和普通函数中使用 await，必须在 async 修饰的函数体里面使用&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不在 async 函数体里面会报错😒&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/7654e55b</guid>
            <title>各个管理端框架比较参考</title>
            <link>https://blog.liq2.com/article/7654e55b</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/tools/" />
            <category term="UI框架" scheme="https://blog.liq2.com/tags/UI%E6%A1%86%E6%9E%B6/" />
            <pubDate>Wed, 25 May 2022 08:32:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;市面上越来越多的好看的管理端框架，真是可谓眼花缭乱，对于做主要做后端的人来说，真是个好事情，拿下代码来稍作学习便可以开发管理系统了！本文就分享一些体验过的框架。&lt;/p&gt;
&lt;p&gt;感觉目前 UI 框架整体分三类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注重视觉和生态的，比如 ant-design, acro-design 等；&lt;/li&gt;
&lt;li&gt;注重组件开发的，如 element-ui, vant, naive-ui 等；&lt;/li&gt;
&lt;li&gt;注重开箱即用的，这种方式基本上是在上面的两种框架的基础上，自己通过整合路由、权限和一些常用实现，同时对性能和美观方面进行优化的前端框架，比如 antd-admin, naive-ui-admin,  vue-admin-better 等；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;naive-ui&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#naive-ui&#34;&gt;#&lt;/a&gt; naive-ui&lt;/h2&gt;
&lt;p&gt;这个目前兴趣比较大的一个框架，因为感觉跟现在的项目要求比较契合，界面也基本 OK&lt;/p&gt;
&lt;p&gt;官网 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmFpdmV1aS5jb20v&#34;&gt;点这里&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmFpdmV1aS5jb20vemgtQ04vb3MtdGhlbWUvZG9jcy9pbnRyb2R1Y3Rpb24=&#34;&gt;Naive UI - Naive UI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;组件说明：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmFpdmV1aS5jb20vemgtQ04vb3MtdGhlbWUvY29tcG9uZW50cy9idXR0b24=&#34;&gt; Naive UI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525093636.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;soybean-admin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#soybean-admin&#34;&gt;#&lt;/a&gt; soybean-admin&lt;/h3&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hvbmdodWFuZ2RjL3NveWJlYW4tYWRtaW4=&#34;&gt;基于 Vite + Vue3 + NaiveUI + TypeScript 的漂亮清新的中后台管理模版 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3liZWFuLnByby8=&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525093923.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;naive-ui-admin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#naive-ui-admin&#34;&gt;#&lt;/a&gt; naive-ui-admin&lt;/h3&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2pla2lwL25haXZlLXVpLWFkbWlu&#34;&gt;Naive Ui Admin 基于 vue3,vite2,TypeScript 的中后台解决方案 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uYWl2ZS11aS1hZG1pbi52ZXJjZWwuYXBw&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525094131.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个还支持其他几个版本，貌似除了 v1 版本之外收费，naive 版本的 v2 个人觉得界面还可以，但是价钱对比没有什么优势&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525094837.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;admin-work&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#admin-work&#34;&gt;#&lt;/a&gt; admin-work&lt;/h3&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3FpbmdxaW5neHVhbi9hZG1pbi13b3Jr&#34;&gt;一款免费开源、功能强大、方便易用、漂亮的中后台管理系统模板&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2F3LnZ1ZWFkbWlud29yay5jb20v&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525100846.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​	虽然也有收费版，但是我居然觉得免费版要比收费的要好看 😂&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525101100.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ant-design&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ant-design&#34;&gt;#&lt;/a&gt; ant-design&lt;/h2&gt;
&lt;p&gt;这个目前官方只有 React 版本，Vue 版本由个人开发维护&lt;/p&gt;
&lt;p&gt;官方网址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hbnQuZGVzaWduL2luZGV4LWNu&#34;&gt;Ant Design - 一套企业级 UI 设计语言和 React 组件库&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ant-design-pro&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ant-design-pro&#34;&gt;#&lt;/a&gt; ant-design-pro&lt;/h3&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi1wcm8=&#34;&gt;Use Ant Design like a Pro&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcmV2aWV3LnByby5hbnQuZGVzaWdu&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525103829.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;antd-admin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antd-admin&#34;&gt;#&lt;/a&gt; antd-admin&lt;/h3&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3p1aWlkZWEvYW50ZC1hZG1pbg==&#34;&gt;zuiidea/antd-admin: An excellent front-end solution for enterprise applications built upon Ant Design and UmiJS (github.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hbnRkLWFkbWluLnp1aWlkZWEuY29tLw==&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220525113134.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;acro-design&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acro-design&#34;&gt;#&lt;/a&gt; acro-design&lt;/h2&gt;
&lt;p&gt;这个是字节跳动最近两年才开源出来的视觉设计和生态框架，和 semi 同属一家公司还几乎同时开源 😂, 居然还同时被指抄袭 antd, 它有 React 和 Vue 两个版本，官方提供 arco-pro 基础开发框架&lt;/p&gt;
&lt;p&gt;官网： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNvLmRlc2lnbi8=&#34;&gt;Arco Design - 企业级产品的完整设计和开发解决方案&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;arco-design-pro-vue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arco-design-pro-vue&#34;&gt;#&lt;/a&gt; arco-design-pro-vue&lt;/h3&gt;
&lt;p&gt;官方提供的框架&lt;/p&gt;
&lt;p&gt;项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FyY28tZGVzaWduL2FyY28tZGVzaWduLXByby12dWU=&#34;&gt;An out-of-the-box solution to quickly build enterprise-level applications based on Arco Design&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;预览地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92dWUtcHJvLmFyY28uZGVzaWduLw==&#34;&gt;点我预览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220525115320506.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/768b74a2</guid>
            <title>jsDelivr静态文件CDN加速失效之后解决方案和PicGo图床基本使用</title>
            <link>https://blog.liq2.com/article/768b74a2</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/tools/" />
            <category term="jsDelivr" scheme="https://blog.liq2.com/tags/jsDelivr/" />
            <category term="PicGo图床" scheme="https://blog.liq2.com/tags/PicGo%E5%9B%BE%E5%BA%8A/" />
            <pubDate>Fri, 20 May 2022 16:33:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;屁颠屁颠用 gihub+jsDelivr 加速做 js 文件 cdn 加速和图床之后，发现国内网络访问打开不到图片，原来 jsDelivr 在去年年底不能访问了，官方声明 Unfortunately today jsDelivr unexpectedly lost its ICP license in China.&lt;br /&gt;
&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/vyUEcWz3Hfsx6oZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虽然说看起来是给创建博客的个人和小企业来说是个坏事，但是对于整个国家宏观来说却也可以理解，国人必须要自己能拥有网络内容主动权嘛，话说现在形势还这么紧张不是；&lt;/p&gt;
&lt;h2 id=&#34;全局url替代&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局url替代&#34;&gt;#&lt;/a&gt; 全局 URL 替代&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果使用的是 npm 库，可以使用 unpkg.com 替换&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js&lt;/code&gt; ，替换为 &lt;code&gt;https://unpkg.com/pace-js@1.0.2/pace.min.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上面方式慢，可以使用中国镜像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3VucGtnLnpoaW1nLmNvbQ==&#34;&gt;unpkg.zhimg.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.min.js&lt;/code&gt; ，替换为 &lt;code&gt;https://unpkg.zhimg.com/pace-js@1.0.2/pace.min.js&lt;/code&gt;  但是&lt;strong&gt;这种方式并不是对所有的连接都有效&lt;/strong&gt;，比如： &lt;code&gt;https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js&lt;/code&gt;  被替换之后还是访问不到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，如果是在开发工具里，可以全局搜索 &lt;code&gt;cdn.jsdelivr.net/npm&lt;/code&gt;  替换为 &lt;code&gt;unpkg.com&lt;/code&gt;  或者 &lt;code&gt;unpkg.zhimg.com&lt;/code&gt; ，但是仅限 npm 库，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1jZG4teGk5ZGs3MmQuanNkZWxpdnIubmV0L2NvbWJpbmUlRTUlOEElOUYlRTglODMlQkQlRTUlOEQlQjQlRTUlQjklQjYlRTQlQjglOEQlRTglQjUlQjclRTQlQkQlOUMlRTclOTQlQTg=&#34;&gt;对于 cdn.jsdelivr.net/combine 功能却并不起作用&lt;/span&gt; 😒 ；&lt;/p&gt;
&lt;h3 id=&#34;新的项目使用其他国内支持的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新的项目使用其他国内支持的&#34;&gt;#&lt;/a&gt; 新的项目使用其他国内支持的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG5qcy5jb20v&#34;&gt;https://cdnjs.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudW5wa2cuY29tLw==&#34;&gt;https://www.unpkg.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYm9vdGNkbi5jbi8=&#34;&gt;https://www.bootcdn.cn/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自己搭建服务器或者购买&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自己搭建服务器或者购买&#34;&gt;#&lt;/a&gt; 自己搭建服务器或者购买&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自己搭建&lt;/p&gt;
&lt;p&gt;对于图床服务器可以考虑自己搭建图床服务器 [一个易于搭建的图床服务器](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1JlZG5zL0ltYWdlQmVk&#34;&gt;Redns/ImageBed: 一个易于搭建的图床服务 (github.com)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;搭建 minIO 服务器，暂时不知道是否支持 js 文件 ❓&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;购买收费服务&lt;/p&gt;
&lt;p&gt;比如购买某里，某迅的 CDN 加速，天下没有免费的午餐，交点钱买个安心；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-------------------------------2022-06-06 - 更新分割线 start-------------------------------&lt;/p&gt;
&lt;h3 id=&#34;使用临时可用的连接地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用临时可用的连接地址&#34;&gt;#&lt;/a&gt; 使用临时可用的连接地址&lt;/h3&gt;
&lt;p&gt;根据 github 上面的 jsdelivr 项目的 issue 提示， 居然有可以用的的域名&lt;br /&gt;
&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/20220609141107.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
如上图所示，我们可以根据上面的域名，进行对使用的项目进行由 &lt;code&gt;cdn.jsdelivr.net&lt;/code&gt;  到 &lt;code&gt;fastly.jsdelivr.net&lt;/code&gt;  全局替换， 这个方法应该适用于 hexo 的 shoka 主题国内不可用问题&lt;/p&gt;
&lt;p&gt;-------------------------------2022-06-06 - 更新分割线 end-------------------------------&lt;/p&gt;
&lt;h2 id=&#34;picgo图床的基本使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#picgo图床的基本使用&#34;&gt;#&lt;/a&gt; PicGo 图床的基本使用&lt;/h2&gt;
&lt;h3 id=&#34;软件下载和安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件下载和安装&#34;&gt;#&lt;/a&gt; 软件下载和安装&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv&#34;&gt;PicGo&lt;/span&gt; 是一个 github 上开源项目，发布的版本可以点&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz&#34;&gt;这里&lt;/span&gt;下载，写文章的时候的最新稳定版本是 2.3.0，安装成功后如图；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts//blog/article-files/2022/05/20220521094526.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;插件安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件安装&#34;&gt;#&lt;/a&gt; 插件安装&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1zbS1wdjJjbzU0Y2Z6aXdpZDFyZWJ1NGF6d2lldDFjZHZncTUxYnVqdS5tcw==&#34;&gt;上面安装的版本默认支持 sm.ms&lt;/span&gt;, 腾讯云 cos，又拍云，github，阿里云 oss 等， 但是想要支持 gitee 和其他如 imgtp 上传的话需要点击插件设置安装插件之后才能使用，&lt;/p&gt;
&lt;p&gt;点击插件设置可以进行关键字搜索进行安装，有时候不知道有哪些插件可用，所以我更喜欢点上面的购物袋进行插件列表查看，或者点&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1BpY0dvL0F3ZXNvbWUtUGljR28=&#34;&gt;这里&lt;/span&gt;直接传送；然后看看哪些图床可以使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts//blog/article-files/2022/05/20220521095325.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;账号配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#账号配置&#34;&gt;#&lt;/a&gt; 账号配置&lt;/h3&gt;
&lt;p&gt;根据各个平台要求，结合各个插件使用进行配置，就能完成图床的配置；&lt;/p&gt;
&lt;p&gt;说下我选择图床的考虑因素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;要有内容自主权&lt;/p&gt;
&lt;p&gt;现在免费的和付费的图床这么多，自然是要考虑要一个自己控制内容的，我作为写博客使用的图床，一般都是会根据时间进行放置，所以必要能按照我希望的格式和目录去放置，大致看了下除了七牛，腾讯云 COS，阿里云 OSS，github 这些大厂提供的服务可以存放到指定的目录，但是都是有容量限制要不就是要米🔓&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份功能和图床切换方便&lt;/p&gt;
&lt;p&gt;万一你使用的图床挂了呢，必须是要能整个图床内容图片整体备份出来，按照一定的格式切换到另外一个图床继续浪里个浪啊；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件上传和链接获取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件上传和链接获取&#34;&gt;#&lt;/a&gt; 文件上传和链接获取&lt;/h3&gt;
&lt;p&gt;上传和链接获取这个应该是用过电脑一年以上的人应该都是了的，应该不用多说了，直接上传剪贴板的图片功能也支持微信等一些工具的截图，💃真是非常的 nice 啊！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/ffae4388</guid>
            <title>用jsDelivr和Github做免费的CDN加速</title>
            <link>https://blog.liq2.com/article/ffae4388</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/tools/" />
            <category term="jsDelivr" scheme="https://blog.liq2.com/tags/jsDelivr/" />
            <category term="CDN加速" scheme="https://blog.liq2.com/tags/CDN%E5%8A%A0%E9%80%9F/" />
            <pubDate>Mon, 16 May 2022 12:13:50 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;cdn解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cdn解释&#34;&gt;#&lt;/a&gt; CDN 解释&lt;/h2&gt;
&lt;p&gt;CDN 是内容分发网络（Content Delivery Network）的首字母简写，是指一组分布在不同地理位置的服务器，协同工作以提供互联网内容的快速交付。&lt;/p&gt;
&lt;p&gt;CDN 允许快速传输加载互联网内容所需的资源，包括 HTML 页面、javascript 文件、样式表、图像和视频。 CDN 服务已得到不断普及。如今，大多数 web 流量都通过 CDN 提供服务，包括来自 Facebook、Netflix 和亚马逊等主要网站的流量。&lt;/p&gt;
&lt;p&gt;正确配置的 CDN 还可帮助保护网站免受某些常见的恶意攻击，例如分布式拒绝服务（DDOS）攻击。&lt;/p&gt;
&lt;h3 id=&#34;为什么使用cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么使用cdn&#34;&gt;#&lt;/a&gt; 为什么使用 CDN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;缩短网站加载时间 – 通过将内容分发到访问者附近的 CDN 服务器（以及其他优化措施），访问者体验到更快的页面加载时间。由于访问者更倾向于离开加载缓慢的网站，CDN 可以降低跳出率并增加人们在该网站上停留的时间。换句话说，网站速度越快，用户停留的时间越长。&lt;/li&gt;
&lt;li&gt;减少带宽成本 – 网站托管的带宽消耗成本是网站的主要费用。通过缓存和其他优化，CDN 能够减少源服务器必须提供的数据量，从而降低网站所有者的托管成本。&lt;/li&gt;
&lt;li&gt;增加内容可用性和冗余 – 大流量或硬件故障可能会扰乱正常的网站功能。由于 CDN 具有分布式特性，因此与许多源服务器相比，CDN 可以处理更多流量并更好地承受硬件故障。&lt;br /&gt;
改善网站安全性 – CDN 可以通过提供 DDoS 缓解、安全证书的改进以及其他优化措施来提高安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建过程&#34;&gt;#&lt;/a&gt; 创建过程&lt;/h2&gt;
&lt;h3 id=&#34;创建github静态文件存放项目比如&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建github静态文件存放项目比如&#34;&gt;#&lt;/a&gt; 创建 github 静态文件存放项目，比如：&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516145102758.png&#34; alt=&#34;创建项目&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;提交静态文件到1创建项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提交静态文件到1创建项目&#34;&gt;#&lt;/a&gt; 提交静态文件到 #1 创建项目&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516145102754.png&#34; alt=&#34;提交文件&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;获取转换文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取转换文件&#34;&gt;#&lt;/a&gt; 获取转换文件&lt;/h3&gt;
&lt;p&gt;复制文件地址到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tL2dpdGh1Yg==&#34;&gt;https://www.jsdelivr.com/github&lt;/span&gt; 进行地址转换， 点击 copy 获取 cdn 连接&lt;/p&gt;
&lt;p&gt;其实这里的路径规则就是 按照&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;知道这个规则之后你可以自行修改路径了  🤞&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220516161211430.png&#34; alt=&#34;image-20220516161211430&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h3&gt;
&lt;p&gt;在 html 或者 markdown 文件里面引用 URL  💃&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/7d501b47</guid>
            <title>Hexo的aomori主题使用Remark42搭建文章评论功能</title>
            <link>https://blog.liq2.com/article/7d501b47</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/tools/" />
            <category term="Hexo" scheme="https://blog.liq2.com/categories/frontend/tools/hexo/" />
            <category term="Hexo" scheme="https://blog.liq2.com/tags/Hexo/" />
            <category term="工具使用" scheme="https://blog.liq2.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/" />
            <pubDate>Sun, 15 May 2022 13:32:25 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;开始求生欲望极强的声明一下，本人刚刚开始玩 Hexo 几天，所以都是以我现在的水平表述操作过程，说得不对还请多多指正。&lt;/p&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境说明&#34;&gt;#&lt;/a&gt; 环境说明&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Hexo 6.2.0&lt;/li&gt;
&lt;li&gt;主题 Aomori 1.35.0&lt;/li&gt;
&lt;li&gt;Remark42 1.9.0&lt;/li&gt;
&lt;li&gt;Remark42 部署服务器环境 wind10 操作系统&lt;/li&gt;
&lt;li&gt;nginx 1.21.6&lt;/li&gt;
&lt;li&gt;部署环境，Github Pages&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作过程&#34;&gt;#&lt;/a&gt; 操作过程&lt;/h2&gt;
&lt;h3 id=&#34;配置自己的remark42服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置自己的remark42服务器&#34;&gt;#&lt;/a&gt; &lt;strong&gt;配置自己的 remark42 服务器&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;官方提供两中配置方式，docker 部署和二进制安装部署，本文使用 windwos 环境下的 zip 文件进行安装&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3VtcHV0dW4vcmVtYXJrNDIvcmVsZWFzZXMvZG93bmxvYWQvdjEuOS4wL3JlbWFyazQyLndpbmRvd3MtYW1kNjQuemlw&#34;&gt;点这里下载 Remark42-1.9.0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载后直接解压，文件结构也很简单&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-- _config.yml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-- var&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;|   +-- avanta&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;|   +-- backups&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-- remark42.windows-amd64.exe&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-- README.md&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-- LICENSE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参考官方文档的例子  cmd 到文件夹之后  直接用 remark42.windows-amd64.exe 后面带配置参数就可以跑起来， &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvaW5zdGFsbGF0aW9uLw==&#34;&gt;官方文档说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;比如使用官方的启动例子就能运行起来：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ remark42.linux-amd64 server --secret&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12345&lt;/span&gt; --url&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;http://127.0.0.1:8080&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行之后你浏览器打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEyNy4wLjAuMTo4MDgwL3dlYg==&#34;&gt;http://127.0.0.1:8080/web&lt;/span&gt;, 能够看到一个如下的页面，说明你已经跑起来 😄&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/image-20220515185339060.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考启动参数，结合自身项目情况，我整理了几个可能你和我一样也可能用到的一个一个启动命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remark42.windows-amd64.exe server --secret&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;not4you2know --url&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;https://sub.yourdomain.com --auth.github.cid&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1107&lt;/span&gt;********9011b --auth.github.csec&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;a7665**********05741 --auth.anon --site&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mySiteId&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中各个参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;--secret 必须参数，官方说明是 secret key, can be any long and hard-to-guess string 具体是起什么作用？没有弄明白，又知道的请留言帮我解惑🤝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--url Remark42 服务器的 URL 必须的参数， 这个也不知道起什么作用，我测试是设置内网 http://127.0.0.1:8080 地址，然后用 nginx 映射道外网域名使用自己的域名也没有发现问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--auth 开头的参数，用于配置评论的身份认证，需要开通第三方的登陆认证权限，本例子直配置了 github 登陆认证权限，获取第三方应用分配的 clientId 和 clientScret 分别对应 --auth.github.cid 和 auth.github.csec 两个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--auth.anon 是否允许匿名评论 (匿名评论也需要随便填入一个昵称)，只有 key 没有值，加上为 true, 去掉就是 false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--site 这个参数默认是 remark, 必须和前端的配置一致，不一致可能导致之前评论会丢失&lt;/p&gt;
&lt;p&gt;其他配置说明请参考官方说明 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL3BhcmFtZXRlcnMv&#34;&gt;Remark42 服务器配置说明&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置外网映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置外网映射&#34;&gt;#&lt;/a&gt; &lt;strong&gt;配置外网映射&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于博客放到外网，所以需要把 Remark42 进行外网映射，具体配置方式这里不做说明，需要注意的两个地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 GitHub pages 和 GitLab pages 都是默认使用 SSL 协议的 https 进行访问，所以映射需要同样的使用 SSL 部署 Remark42&lt;/li&gt;
&lt;li&gt;考虑前端的访问跨域问题 (后面验证好像 Remark42 默认支持跨域访问，但是为了保险最好也不要忽略)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置hexo的_configyml文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置hexo的_configyml文件&#34;&gt;#&lt;/a&gt; &lt;strong&gt;配置 Hexo 的_config.yml 文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Hexo 的根目录 _config.yml, 添加如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;aomori_remark42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 如果要放到 github pages，需要把第 #1 步映射到外网&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://sub.yourdomain.com&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;site_id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mySiteId&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 最多显示评论数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;max_shown_comments&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;light&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 用中文显示评论框&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;zh&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 一些组件配置 embed 基本评论小部件 last-comments 最后评论小部件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;embeded&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;last-comments&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 是否显示邮件订阅&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;show_email_subscription&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;按照上面的配置做好了之后，基本上就可以用了，其中各个参数的含义如官方说明 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL2Zyb250ZW5kLw==&#34;&gt;Remark42 前端配置&lt;/span&gt;)：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; string (required) – hostname of Remark42 server&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; same as REMARK_URL in backend config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e.g. &#34;https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//demo.remark42.com&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;site_id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; string (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; remark by default) – the SITE that you passed to Remark42 instance on start of backend.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; string (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; window.location.origin + window.location.pathname by default) – url to the page with comments&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; it is used as unique identificator for comments thread&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Note that if you use query parameters as significant part of URL (the one that actually changes content on page) you will have to configure URL manually to keep query params&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; as window.location.origin + window.location.pathname doesn&#39;t contain query params and hash. For example&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; default URL for https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//example/com/example&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;id=1&lt;span class=&#34;token comment&#34;&gt;#hash would be https://example/com/example-post&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&#39;embed&#39; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#39;last&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;comments&#39; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#39;counter&#39;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;embed&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; by default) – an array of widgets that should be rendered on a page. You may use more than one widget on a page.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;Available components are&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;embed&#39; – basic comments widget&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;last&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;comments&#39; – last comments widget&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; see Last Comments section below&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;counter&#39; – counter widget&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; see Counter section below&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;max_shown_comments&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; number (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 15 by default) – maximum number of comments that is renered on mobile version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &#39;light&#39; &lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt; &#39;dark&#39; (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &#39;light&#39; by default) – changes UI theme&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;page_title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; string (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; document.title by default) – title for current comments page&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; enum (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &#39;en&#39; by default) – interface localization&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; check possible localizations&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;show_email_subscription&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; boolean (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; true by default) – enables email subscription feature in interface when enable it from backend side&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; if you set this param in false you will get notifications email notifications as admin but your users won&#39;t have interface for subscription&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;simple_view&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; boolean (optional&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; false by default) – overrides the parameter from the backend minimized UI with basic info only&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;遇到的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到的问题&#34;&gt;#&lt;/a&gt; 遇到的问题&lt;/h2&gt;
&lt;h3 id=&#34;配置remark42需要ssl证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置remark42需要ssl证书&#34;&gt;#&lt;/a&gt; 配置 Remark42 需要 SSL 证书&lt;/h3&gt;
&lt;p&gt;可以去阿里云官网去申请免费的 ssl 证书，然后在适当的位置配置上就可以&lt;/p&gt;
&lt;h3 id=&#34;remrk客户端显示不了登陆选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#remrk客户端显示不了登陆选项&#34;&gt;#&lt;/a&gt; Remrk 客户端显示不了登陆选项&lt;/h3&gt;
&lt;p&gt;Remark42 默认没有配置任何登陆选项，请至少打开 --scret.anno 以支持匿名评论，其他的认证方式情参考官网说明&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZW1hcms0Mi5jb20vZG9jcy9jb25maWd1cmF0aW9uL2F1dGhvcml6YXRpb24v&#34;&gt; Remark42 认证权限说明&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/3aeffd05</guid>
            <title>Alpine和eleventy搭配的基本使用</title>
            <link>https://blog.liq2.com/article/3aeffd05</link>
            <category term="前端" scheme="https://blog.liq2.com/categories/frontend/" />
            <category term="开发框架" scheme="https://blog.liq2.com/categories/frontend/framework/" />
            <category term="工具" scheme="https://blog.liq2.com/categories/frontend/framework/tools/" />
            <category term="Alpine" scheme="https://blog.liq2.com/tags/Alpine/" />
            <category term="11ty" scheme="https://blog.liq2.com/tags/11ty/" />
            <category term="eleventy" scheme="https://blog.liq2.com/tags/eleventy/" />
            <pubDate>Fri, 13 May 2022 15:31:26 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;同理，先占位， 后面会更新&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/955aeda8</guid>
            <title>JAVA多线程总结之一</title>
            <link>https://blog.liq2.com/article/955aeda8</link>
            <category term="后端" scheme="https://blog.liq2.com/categories/backend/" />
            <category term="Java" scheme="https://blog.liq2.com/categories/backend/java/" />
            <category term="多线程" scheme="https://blog.liq2.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" />
            <category term="线程池" scheme="https://blog.liq2.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/" />
            <category term="JUC" scheme="https://blog.liq2.com/tags/JUC/" />
            <pubDate>Fri, 13 May 2022 13:49:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;这里还没有任何内容，先占个位！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.liq2.com/article/52cf48bf</guid>
            <title>开通博客第一天</title>
            <link>https://blog.liq2.com/article/52cf48bf</link>
            <category term="感悟" scheme="https://blog.liq2.com/categories/comprehension/" />
            <category term="心情" scheme="https://blog.liq2.com/categories/comprehension/mood/" />
            <category term="心情记录" scheme="https://blog.liq2.com/tags/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/" />
            <category term="胡言乱语" scheme="https://blog.liq2.com/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/" />
            <pubDate>Thu, 12 May 2022 21:02:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;喜大普奔，终于搞定一个低成本的放博客的地方，并且实实在在的跑了起来！&lt;/p&gt;
&lt;h2 id=&#34;博客目的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#博客目的&#34;&gt;#&lt;/a&gt; 博客目的&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;记录各种操作的过程，便于以后查阅；&lt;/li&gt;
&lt;li&gt;锻炼写作，提升自己思路整理能力；&lt;/li&gt;
&lt;li&gt;各种分享；&lt;/li&gt;
&lt;li&gt;看看自己能不能坚持做一件事，我想如果我坚持，然后不时翻一翻，应该还是有好处。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/crabeye/site-asserts/blog/article-files/2022/05/cover_20220512.jfif&#34; alt=&#34;happy&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;加油&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加油&#34;&gt;#&lt;/a&gt; 加油！&lt;/h2&gt;
 ]]></description>
        </item>
    </channel>
</rss>
